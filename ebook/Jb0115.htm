<!--
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Jb0115</title>
<style type="text/css">
a:link {color:#0000ff;}
a:visited {color:#cc00cc;}
a:active {color:#ff0000;}
p{color:black;}
h1{color:green}
h2{color: purple}
h3{color: gray}
b{color: #000000}
strong{color: #000000}
blockquote{color: purple}
ul{color: maroon}
ol{color: maroon}
table{border: 1px solid black}
th{border: 1px solid black}
a:hover {
	color: #cc0000;
	font-weight: bold;
	text-decoration: none;
}
.auto-style1 {
	text-align: center;
}
div.a {
  border: 2px solid black;

}
div.a {
  border: 2px solid black;
}
</style>
</head>

<body style="font-family: Arial,Helvetica,sans-serif;font-size: 12pt; background-color: #FEFFF0;"
>
<h1 class="auto-style1">Jb0115: First Program</h1>


<h1>Table of Contents</h1>
<ul>
	<li><a href="#Preface">Preface</a>
	</li>
	<li><a href="#Discussion_and_sample_code">Discussion</a></li>
	<li><a href="#Run_the_program">Run the program</a></li>
	<li><a href="#Miscellaneous">Miscellaneous</a></li>
	<li><a href="#Complete_program_listing">Complete program listing</a></li>
</ul>
	<h1><a name="Preface">Preface</a></h1>
<p>The purpose of this chapter is to present the first complete Java program of 
the eBook. This program previews the most common
forms of the three pillars of procedural programming: </p>
<ul>
	<li>sequence
</li>
	<li>selection
</li>
	<li>loop

</li>
</ul>
<p>The program also illustrates </p>
<ul>
	<li>calling a method, </li>
	<li>passing a parameter to the method, and</li>
	<li>receiving a returned 
value from the method.</li>
</ul>
<p>As mentioned above, this is simply a preview. Detailed discussions of these 
topics will be presented in future chapters.</p>
	<h2><a name="Viewing_tip">Viewing tip</a></h2>
	<p>I recommend that you open another copy of this chapter in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.</p>
	<h3><a name="Figures">Figures</a></h3>
	<ul>
		<li><a href="#Figure_1">Figure 1</a>. Program output. </li>

	</ul>
	<h3><a name="Listings">Listings</a></h3>
	<ul>
		<li><a href="#Listing_1">Listing 1</a>. Source code for FirstProgram. </li>
	</ul>
	<h1><a name="Discussion_and_sample_code">Discussion</a></h1>
	<h2><a name="Instructions_for_compiling_and_running_the_program">
	Instructions for compiling and running the program</a></h2>
<p>Assuming that the Java Development Kit (JDK) is properly
installed on your computer <em>(see Jb0110: Java OOP: Programming Fundamentals, Getting Started),</em>
	copy the text from <a href="#Listing_1">Listing 1</a> into a text file named 
<strong>FirstProgram.java</strong>
and store the file in a folder on your disk.
Then use what you learned in chapterJb0110 to compile and run the program.</p>
<h2><a name="General_comments">Comments</a></h2>
<p>Any text in the program code that begins with // is a comment <em>(see Kjell
<a href="http://programmedlessons.org/Java9/chap06/ch06_15.html">Comments</a>)</em>. The compiler will ignore everything
from the // to the end of the line. 
</p>
<p>Comments were inserted into the program code to explain the code.</p>
<p>The compiler also ignores blank lines.

Blank lines are typically used to make the program code easier to read.</p>
<p>Note that this program was designed to illustrate the
concepts while being as non-cryptic as possible.

</p>
<h2><a name="Program_output">Program output</a></h2>
<p>The program should display the text shown in <a href="#Figure_1">Figure 1</a>  on the
screen except that the time will be different each time
you run the program.

</p>
<!--``1Fig001-->
<div class="a">
	<p><a name="Figure_1">Figure 1</a>. Program output.
</p>
<pre>
value in = 5 
Odd time = 1353849164875 
countA = 0 
countA = 1 
countA = 2 
countB = 0 
countB = 1 
countB = 2 
value out = 10
</pre></div>

<h1><a name="Run_the_program">Run the program</a></h1>
<p>I encourage you to copy the code from <a href="#Listing_1">Listing 1</a>. Compile the code and execute 
it. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.</p>
	<h1><a name="Miscellaneous">Miscellaneous</a></h1>
	<p>This section contains a variety of miscellaneous information.</p>

<div class="a"><p>Housekeeping material</p>
				
<ul>
					<li>Author: Prof. Richard G. Baldwin</li>
					<li>Chapter name: Jb0115: First Program</li>
					<li>File: Jb0115.htm
</li>
					<li>Revised: 06/06/22</li>
				</ul>
</div>
<h1><a name="Complete_program_listing">Complete program listing</a></h1>
<p>A complete listing of the program follows.</p>
<div class="a">
<p><strong><a name="Listing_1">Listing 1</a>. Source code for 
				FirstProgram.</strong></p>

<pre>
/* Begin block comment
This is the beginning of a block comment in Java.
Everything in this block comment is for human consumption
and will be ignored by the Java compiler.

File: FirstProgram.java
Copyright, R.G. Baldwin

This program is designed to illustrate the most common
forms of the three pillars of procedural programming in
Java code:

sequence
selection
loop

The program also illustrates calling a method, passing
a parameter to the method, and receiving a returned 
value from the method.

Assuming that the Java Development Kit (JDK) is properly
installed on your computer, do the following to compile 
and run this program.

1. Copy this program into a file named FirstProgram.java
and store the file in a folder on your disk.
2. Open a command-line window in the folder containing
the file.
3. Type the following command to compile the program:
javac FirstProgram.java
4.4. Type the following command to run the program:
java FirstProgram

Any text that begins with // in the following program
code is a comment. The compiler will ignore everything
from the // to the end of the line.

The compiler also ignores blank lines.

Note that this program was designed to illustrate the
concepts while being as non-cryptic as possible.

The program should display the following text on the
screen except that the time will be different each time
that you run the program.

value in = 5
Odd time = 1353849164875
countA = 0
countA = 1
countA = 2
countB = 0
countB = 1
countB = 2
value out = 10

End block comment ***************************************/

//The actual program begins with the next line.
import java.util.*;

class FirstProgram{
  //The program consists of a sequence of statements.
  
  //The next statement is the beginning of the main
  // method, which is required in all Java applications.
  public static void main(String[] args){
    //Program execution begins here.
    
    //Declare and initialize a variable.
    int var = 5;
    
    //Statements of the following type display
    // information on the screen
    System.out.println("value in = " + var);
    
    //Call a method and pass a parameter to the method.
    //Save the returned value in var, replacing what
    // was previously stored there.
    //Control is passed to the method named firstMethod.
    var = firstMethod(var);

    //Control has returned from the method named
    // firstMethod.
    System.out.println("value out = " + var);
    
    //Program execution ends here
  }//end main method
  
  /****visual separator comment**************************/
  
  public static int firstMethod(int inData){
    
    //Illustrate selection
    //Get the elapsed time in milliseconds since Jan 1970.
    long time = new Date().getTime();
    
    //Select even or odd time and display the results
    if(time % 2 == 0){
      System.out.println("Even time = " + time);
    }else{
      System.out.println("Odd time = " + time);
    }//end if-else selection
    
    //Illustrate a while loop
    int countA = 0;
    while(countA &lt; 3){
      System.out.println("countA = " + countA);
      //Increment the counter
      countA = countA + 1;
    }//end while loop
    
    //Illustrate a for loop
    for(int countB = 0; countB &lt; 3; countB = countB + 1){
      System.out.println("countB = " + countB);
    }//end for loop
    
    //Illustrate returning a value from a method and
    // returning control back to the calling method.
    return 2*inData;
  }//end firstMethod
  
}//end class FirstProgram
//The program ends with the previous line.</pre>
</div>
	<p>-end- </p>


</body>
</html>
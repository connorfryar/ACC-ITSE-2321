<!--
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Jb0200</title>
<style type="text/css">
a:link {color:#0000ff;}
a:visited {color:#cc00cc;}
a:active {color:#ff0000;}
p{color:black;}
h1{color:green}
h2{color: purple}
h3{color: gray}
b{color: #000000}
strong{color: #000000}
blockquote{color: purple}
ul{color: maroon}
ol{color: maroon}
table{border: 1px solid black}
th{border: 1px solid black}
a:hover {
	color: #cc0000;
	font-weight: bold;
	text-decoration: none;
}
.auto-style1 {
	text-align: center;
}
div.a {
  border: 2px solid black;
}
</style>
</head>

<body style="font-family: Arial,Helvetica,sans-serif;font-size: 12pt; background-color: #FEFFF0;"
>
<h1 class="auto-style1">Jb0200: Variables</h1>

<h1>Table of Contents</h1>
<ul>
	<li><a href="#Preface">Preface</a>
		</li>
	<li><a href="#introduction">Introduction</a></li>
	<li><a href="#samplejavaprogram">Sample program named simple1</a>
	</li>
	<li><a href="#variables">Variables</a>
	</li>
	<li><a href="#scope">Scope</a></li>
	<li><a href="#initializationofvariables">Initialization of 
	variables</a></li>
	<li><a href="#Run_the_program">Run the programs</a></li>
	<li><a href="#Miscellaneous">Miscellaneous</a></li>
</ul>
	<h1><a name="Preface">Preface</a></h1>
	<p>Earlier chapters have touched briefly on the topic of variables. This 
	chapter discusses Java variables in depth. However, before you continue with 
	this chapter, I strongly recommend that you study the Kjell eBook beginning 
	with <a href="http://programmedlessons.org/Java9/chap09/ch09_01.html">CHAPTER 9 — Variables and Assignment Statements</a> and continuing to, but not including
	<a href="http://programmedlessons.org/Java9/chap09/ch09_22.html">Arithmetic Operators</a>. 
	<em>(We will take up operators later in J<a href="Jb0210.htm">b0210: 
	Operators</a>.)</em> Please also work through the
	<a href="https://programmedlessons.org/Java9/chap09/chap09quiz.html">Quiz</a>,
	<a href="http://programmedlessons.org/Java9/chap09/progExercises09.html">
	Exercises</a>, and
	<a href="http://programmedlessons.org/Java9/chap09/flashCards09.html">Flash 
	Cards</a> for Kjell Chapter 9.</p>
<p>You might also want to skip ahead and read Kjell 
<a href="http://programmedlessons.org/Java9/chap12/ch12_01.html">CHAPTER 12 — Input and Output</a>.</p>
	<h2><a name="Viewing_tip">Viewing tip</a></h2>
	<p>I recommend that you open another copy of this chapter in a separate 
browser window and use the following links to easily find and view the Figures 
and Listings while you are reading about them.</p>
	<h3><a name="Figures">Figures</a></h3>
	<ul>
		<li><a href="#Figure_1">Figure 1</a>. Screen output from the program named simple1. </li>
		<li><a href="#Figure_2">Figure 2</a>. Information about the primitive types in Java. </li>
		<li><a href="#Figure_3">Figure 3</a>. Rules for naming variables. </li>
		<li><a href="#Figure_4">Figure 4</a>. Rules for legal identifiers. </li>
		<li><a href="#Figure_5">Figure 5</a>. Scope categories. </li>

	</ul>
	<h3><a name="Listings">Listings</a></h3>
	<ul>
		<li><a href="#Listing_1">Listing 1</a>. Source code for the program named simple1. </li>
		<li><a href="#Listing_2">Listing 2</a>. Declaring and initializing two variables named ch1 and ch2. </li>
		<li><a href="#Listing_3">Listing 3</a>. Display the character. </li>
		<li><a href="#Listing_4">Listing 4</a>. Beginning of a while loop. </li>
		<li><a href="#Listing_5">Listing 5</a>. Beginning of the main method.</li>
		<li><a href="#Listing_6">Listing 6</a>. The program named wrapper1.</li>
		<li><a href="#Listing_7">Listing 7</a>. Aspects of using a wrapper class.</li>
		<li><a href="#Listing_8">Listing 8</a>. The program named member1.</li>
		<li><a href="#Listing_9">Listing 9</a>. Initialization of variables.</li>
	</ul>
<h1><a name="introduction"></a>Introduction</h1>
<h2>The first step</h2>
<p>The first step in learning to use a new programming language 
is usually to learn the foundation concepts such as </p>
<ul>
	<li>variables</li>
	<li>types</li>
	<li>expressions</li>
	<li>flow-of-control, etc. </li>
</ul>
<p>This and several future chapters 
concentrate on that foundation.</p>
<h2>A sample program</h2>
<p>The chapter begins with a sample Java program named <strong>simple1</strong>. The user is 
asked to enter some text and to terminate with the # character.</p>
<p><em>(This program contains a lot of code that you are not yet prepared to 
understand. For the time being, just concentrate on the use of variables in the 
program. You will learn about the other aspects of the program in future 
chapters.)</em></p>
<p>The program 
loops, saving individual input characters until encountering the # character. When it 
encounters the # character, it terminates and displays the character entered 
immediately prior to the # character.</p>
<h1><a name="samplejavaprogram"></a>Sample 
program named simple1</h1>
<p>A complete listing of the program named <strong>simple1</strong> is provided in <a href="#Listing_1">Listing 1</a>. 
Discussions of selected portions of the 
program are presented later in the chapter.</p>
<!--``1List01-->
<div class="a"><a name="Listing_1">Listing 1</a>. Source code for the 
				program named simple1.

<pre>
/*File simple1.java Copyright, R.G.Baldwin
This Java application reads bytes from the keyboard until
encountering the integer representation of &#39;#&#39;.  At 
the end of each iteration, it saves the byte received and 
goes back to get the next byte.

When the &#39;#&#39; is entered, the program terminates input and
displays the character which was entered before the #.
**********************************************************/

class simple1 { //define the controlling class

  //It is necessary to declare that this method 
  // can throw the exception shown below (or catch it).
  public static void main(String[] args) //define main 
                        throws java.io.IOException {

    //It is necessary to initialize ch2 to avoid a compiler
    // error (possibly uninitialized variable) at the 
    // statement which displays ch2.
    //Declare two variables and initialize
    // one of them.
    int ch1, ch2 = &#39;0&#39;;

    System.out.println(
                      &quot;Enter some text, terminate with #&quot;);

    //Get and save individual bytes in the variable
    // named ch1.
    while( (ch1 = System.in.read() ) != &#39;#&#39;) 
      //Save the contents of ch1 in the variable
      // named ch2.
      ch2 = ch1;

    //Display the character immediately before the #
    // that is contained in ch2.
    System.out.println(
          &quot;The char before the # was &quot; + (char)ch2);
  }//end main
}//End simple1 class.
</pre>

</div>
<!--``2-->
	<h2>Program output</h2>
<p>The output produced by compiling and running this program is shown in 
<a href="#Figure_1">Figure 1</a>. The first and third lines of text were 
produced by the program. The second line of text in <a href="#Figure_1">Figure 1</a> 
ending with the # character 
was typed by the user.</p>



<div class="a">
	<p><a name="Figure_1">Figure 1</a>. Screen output from the 
				program named simple1.
</p>
<pre>
Enter some text, terminate with # 
abcde# 
The char before the # was e 
</pre></div>



<h2><a name="discussionofsampleprograms"></a>Discussion of the simple1 program</h2>
<h3>Purpose</h3>
<p>I will use the program shown in <a href="#Listing_1">Listing 
1</a> to 
discuss several important aspects of the structure of a Java program. I will also provide 
two additional sample programs that illustrate specific points not illustrated in 
the above program later in this chapter. </p>
<h1><a name="variables"></a>Variables</h1>








				<h2>What is a variable?
				</h2>
				<p>Variables are used in a Java program to contain data that may 
				change during the execution of the program. According to
				<a href="http://programmedlessons.org/Java9/chap09/ch09_02.html">
				Kjell</a>, a variable is "<span class="highlightred">a named 
				location in main memory which uses a particular data type to 
				hold a value.</span>"</p>
	<h2>Declaring a variable</h2>
<p>To use a variable, you must first notify the compiler of the <em>name</em> and the
<em>type</em> of the variable. This is known as <em>declaring a variable (see 
Kjell 
<a href="http://programmedlessons.org/Java9/chap09/ch09_03.html#declaration">Declaration of a Variable</a>)</em>. </p>
<p>The syntax for declaring a variable is to precede the <em>name</em> of the variable 
with the <em>name of the type (see Kjell 
<a href="http://programmedlessons.org/Java9/chap09/ch09_02.html">Variables</a>)</em> of the variable as shown by the code in
<a href="#Listing_2">Listing 2</a>. It is also possible <em>(but not always required)</em> to initialize 
<em>(see Kjell <a href="http://programmedlessons.org/Java9/chap09/ch09_05.html">Syntax of Variable Declaration</a>)</em> the value stored in a variable 
in Java when it is declared as shown in
<a href="#Listing_2">Listing 2</a>. </p>





<!--``1List02-->
<div class="a"><a name="Listing_2">Listing 2</a>. Declaring and 
				initializing two variables named ch1 and ch2.

<pre>
int ch1, ch2 = &#39;0&#39;;
</pre>

</div>
<!--``2-->
<p>The statement in <a href="#Listing_2">Listing 2</a> declares two variables of type 
<strong>int</strong>, initializing the second variable <em>(ch2)</em> to the value of the zero character (0).
<em>(Note that I didn&#39;t say initialized to the value zero.)</em></p>






<div class="a">
	<p>
	<strong>Difference between zero and '0' - Unicode characters</strong></p>
	<p>The value of the zero character is not the same as the numeric value of zero, but hopefully you already knew that.</p>
	<p>As an aside, characters in Java are 16-bit entities called Unicode characters instead of 8-bit entities as is the case with many 
	earlier programming languages. The purpose is to provide many more possible characters including characters used in alphabets other than the one used in the United States.
	</p>
	<p><em>(Also see Kjell 
	<a href="http://programmedlessons.org/Java9/chap08/ch08_13.html#char">The char Primitive Data Type</a>.)</em></p>
</div>
	<h2>Initialization of the variable</h2>
<p>Initialization of the variable named <strong>ch2</strong> in this case was 
necessary to prevent a compiler error. Without initialization of this variable, 
the compiler would recognize and balk at the possibility that an attempt might be 
made to execute the statement shown in <a href="#Listing_3">Listing 3</a> with a 
variable named <strong>ch2</strong> 
that had not been initialized</p>





<!--``1List03-->
<div class="a"><a name="Listing_3">Listing 3</a>. Display the character.

<pre>
System.out.println(&quot;The char before the # was &quot; 
                                       + (char)ch2);
</pre>

</div>
<!--``2-->
	<h2>Error checking by the compiler</h2>
<p>The strong error-checking capability of the Java compiler would refuse to 
compile this program until that possibility was eliminated by initializing the 
variable. </p>
<h2>Using the cast operator</h2>
<p>You should also note that the contents of the variable <strong>ch2</strong> 
is being <em><a href="https://www.w3schools.com/java/java_type_casting.asp">cast</a></em> as type <strong>char</strong> in <a href="#Listing_3">Listing 3</a>.</p>
<p><em>(A cast is used to temporarily change the type of something to a different type.)</em></p>
<p>Recall that <strong>ch2</strong> is a variable of type <strong>int</strong>, 
containing the numeric value that represents a character.</p>
We want to display the character that the numeric value represents and not 
the numeric value itself. Therefore, we must cast it <em>(purposely change its 
type for the evaluation of the expression)</em>. Otherwise, we would not see the 
character on the screen. Rather, we would see the numeric value that represents 
that character.
<div class="a">
<p>					<strong>Initialization of instance variables and local variables:
					</strong></p>
					<p>As another aside, <em>member variables</em> in Java are automatically initialized to zero or the equivalent of zero. However, 
				<em>local variables</em>, of which ch2 is an example, are not automatically initialized.
				</p></div>
	<h2>Why declare the variables as type int?</h2>
<p>It was necessary to declare these variables as type <strong>int</strong> 
because the statement in <a href="#Listing_4">Listing 4</a> <em>(more 
specifically, the call to the System.in.read method)</em> returns a value of 
type <strong>int</strong>.
</p>
<!--``1List04-->
<div class="a"><a name="Listing_4">Listing 4</a>. Beginning of a while 
				loop.

<pre>
while( (ch1 = System.in.read() ) != &#39;#&#39;) ch2 = ch1;
</pre>

</div>
<!--``2-->
	<p>Java provides very strict type checking and generally refuses to compile 
	statements with type mismatches. </p>
<p><em>(There is a lot of complicated code in </em><a href="#Listing_4"><em>
Listing 4</em></a><em> that I haven&#39;t previously explained. I will explain 
that 
code later in this and future chapters.)</em></p>
<h2>Another variable declaration</h2>
<p>The program in <a href="#Listing_1">Listing 1</a> also makes another variable 
declaration shown by the statement in <a href="#Listing_5">Listing 5</a>. </p>
<!--``1List05-->
<div class="a"><a name="Listing_5">Listing 5</a>. Beginning of the main 
				method.
<pre>
public static void main(String[] args) //define main method
</pre>

</div>
<!--``2-->
	<h2>An array of String references</h2>
<p>In <a href="#Listing_5">Listing 5</a>, the formal argument list of the
<strong>main</strong> method declares an argument named <strong>args</strong> <em>(first cousin to a 
variable)</em> as a reference to an array object of type <strong>String</strong>.
<em>(You may find it useful to skip ahead and read <a href="Jb0240.htm">Jb0240: Arrays and Strings</a>.) (You may 
also find it useful to read Kjell 
<a href="http://programmedlessons.org/Java9/chap60/ch60_02.html#array">Picture of an Array</a>.)</em></p>
<h2>Capturing command-line arguments in Java</h2>
<p>As you learned in an earlier chapter, this is the feature of Java that is used 
to capture arguments entered on the command line, and is required whether 
arguments are entered or not. In this case, no command-line arguments were 
entered, and the variable named <strong>args</strong> is simply ignored by the 
remainder of the program. </p>
<h2>The purpose of the type of a variable</h2>








<div class="a">
					<p>
					<strong>All variables must have a declared type</strong></p>
					<p>The type determines the set of values that can be stored in the variable and the operations that can be performed 
					by and on the variable.
					</p>
</div>
	<p>For example, the <strong>int</strong> type can only contain whole numbers
	<em>(integers)</em>. A whole host of operations are possible with an <strong>
	int</strong> variable including add, subtract, divide, etc.</p>
	
	
	
	<h2>Signed vs. unsigned variables</h2><p>Unlike C++, all variables of type 
<strong>int</strong> in Java contain signed values. In fact, with the exception 
of type <strong>char</strong>, all primitive numeric types in Java contain 
signed values. <em>(If this causes problems, there are workarounds involving 
methods of the
<a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Integer.html">
Integer</a> class in later versions of Java.)</em></p>
<h2>Platform independence</h2>
<p>At this point in the history of Java, a variable of a specified type is 
represented exactly the same way regardless of the platform on which the 
application is being executed. </p>
<p>This is one of the features that causes compiled Java programs to be 
platform-independent. </p>
<h2><a name="Primitive_Types">Primitive 
types</a></h2>
<p>In Java, there are two major categories of data types: </p>

<ul>
	<li>primitive types </li>
	<li>reference <em>(or object)</em> types. </li>
</ul>

<p><em>(Also see Kjell 
<a href="http://programmedlessons.org/Java9/chap08/ch08_04.html#primitive">Primitive Data Types</a>.)</em></p>
<p>Primitive variables contain a single value of one of the eight primitive 
types shown in <a href="#Figure_2">Figure 2</a>.</p>
<p>Reference variables contain references to objects <em>(or null, meaning that 
they don&#39;t refer to anything)</em>. <em>(Also see Kjell 
<a href="http://programmedlessons.org/Java9/chap44/ch44_04.html">The null Value</a>.)</em></p>
<h3>The eight primitive types 
in Java?</h3>

	<p>The table in <a href="#Figure_2">Figure 2</a> lists all of the primitive types in Java along with their size and format, and a brief description of 
each.</p>




<div class="a">
	<p><a name="Figure_2">
Figure 2</a>. Information about the 
				primitive types in Java.
</p>
<pre>
Type       Size/Format                 Description
byte      8-bit two's complement     Byte-length integer
short    16-bit two's complement     Short integer
int      32-bit two's complement     Integer               
long     64-bit two's complement     Long Integer
float    32-bit IEEE 754 format      Single-precision 
                                     floating point
double   64-bit IEEE 754 format      Double-precision 
                                     floating point
char     16-bit Unicode character    Single character
boolean  true or false               True or False
</pre></div>

	<h3>The char type</h3>
<p>The <strong>char</strong> type is a 16-bit Unicode character value that has 
the possibility of representing more than 65,000 different characters. </p>
<h3>Evaluating a primitive variable</h3>
<p>A reference to the name of a primitive variable in program code evaluates to 
the value stored in the variable. In other words, when you call out the name of 
a primitive variable in your code, what you get back is the value stored in the 
variable.</p>

<h3><a name="objectorientedwrappersforprimitivetypes"></a>
Object-oriented wrappers for primitive types</h3>
<h3>Primitive types are not objects</h3>
<p>Primitive data types in Java <em>(int, double, etc.)</em> 
are not objects. This has some ramifications as to how they can be used <em>(passing 
to methods, returning from methods, etc.)</em>. </p>
<h3>The generic Object type</h3>
<p>Later on in this course of study, you will learn that much of 
the power of Java derives from the ability to deal with objects of any type as 
the generic type <strong>Object</strong>. For example, several of the standard classes in 
the API <em>(such as the <strong>Vector</strong> class)</em> are designed to work only 
with objects of type <strong>Object</strong>. </p>
<p><em>(Note that this document was originally published prior to the 
introduction of <a href="https://docs.oracle.com/javase/tutorial/java/generics/">
Generics</a> in Java. The introduction of generics makes it 
possible to cause the <strong>Vector</strong> class to deal with objects of 
types other than <strong>Object</strong>. However, that doesn&#39;t eliminate the 
need for wrapper classes.)</em></p>
<h3>Converting primitives to objects</h3>
<p>Because it is sometimes necessary to deal with a primitive 
value as though it were an object, Java provides <em>wrapper</em> classes that 
support object-oriented functionality for Java&#39;s primitive data types. </p>
<h3>The Double wrapper class</h3>
<p>This is illustrated in the <em>(revised)</em> program shown in <a href="#Listing_6">Listing 6
</a>that deals with a <strong>double</strong> 
type as an object of the class 
<a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html">Double</a>. </p>
<p><em>(Remember, Java is a case-sensitive language. Note the difference between 
the primitive <strong>double</strong> type and the class named <strong>Double</strong>.)</em></p>
	
	
<!--``1List06-->
<div class="a"><a name="Listing_6">Listing 6</a>. The program named 
				wrapper1.
<pre>
/*File wrapper1.java Copyright, R.G.Baldwin
Revised 06/25/21
This Java application illustrates the use of wrappers 
for the primitive types.

This program produces the following output:

My wrapped double is 5.5
My primitive double is 10.5

**********************************************************/
class wrapper1 { //define the controlling class
  public static void main(String[] args){//define main

    //The following is the declaration and instantiation of 
    // a Double object, or a double value wrapped in an 
    // object of the class Double. Note the use of the 
    // upper-case D.

    // Earlier deprecated constructor follows
    // Double myWrappedData = new Double(5.5);
    
    // First alternative replacement for deprecated constructor
    // using valueOf method.
    // Double myWrappedData = Double.valueOf(5.5);
    
    // Second alternative replacement for deprecated constructor
    // using Autoboxing.
    Double myWrappedData = 5.5; 
       
    //The following is the declaration and initialization 
    // of a primitive double variable. Note the use of the
    // lower-case d.
    double myPrimitiveData = 10.5;

    //Note the call to the doubleValue() method to obtain 
    // the value of the double wrapped in the Double 
    // object.
    System.out.println(
      &quot;My wrapped double is &quot; + myWrappedData.doubleValue());
    System.out.println(
             &quot;My primitive double is &quot; + myPrimitiveData );
  }//end main
}//End wrapper1 class.
</pre>

</div>
<!--``2-->
	<p>Note that one of the original statements in this revised version of the 
	program has been disabled by converting 
	it to a comment and indicating that it is a
	<a href="https://techterms.com/definition/deprecated">deprecated</a> 
	constructor. </p>
<blockquote>"In the world of software development, "deprecated" refers to functions or elements that are in the process of being replaced by newer ones."</blockquote>
<p>That statement is replaced by one alternative statement <em>(shown as a 
comment)</em> in accordance 
	with the 	<a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Double.html">documentation</a> 
	for Java version 9 and a second alternative statement in accordance with the 
	description of
	<a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">
	Autoboxing</a>. In other words, two different alternative statements for the 
	deprecated constructor are shown, one of which is disabled by marking it as 
	a comment.</p>
<p>The <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Double.html">documentation</a> 
for Java version 9 states that the <strong>Double(double value)</strong> 
constructor is <em>"<strong>Deprecated</strong>. 
It is rarely appropriate to use this constructor. The static factory <strong>valueOf(double) 
</strong>is generally a better choice, as it is likely to yield significantly better space and time performance."</em></p>
<p>The 
<a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Double.html">documentation</a> for 
the later Java version 16 states that the <strong>Double(double value)</strong> 
constructor is <em>"<strong>Deprecated, for removal: This API element is subject to removal in a future version</strong>.
It is rarely appropriate to use this constructor."</em></p>
<p>As indicated above and shown in <a href="#Listing_6">Listing 6</a>, one alternative to the use of this deprecated constructor is the static method of the 
<strong>Double</strong> class, <strong>valueOf(double d)</strong>, which <em>"Returns a Double instance representing the specified double value." 
(Note that this alternative is shown as a comment in <a href="#Listing_6">
Listing 6</a>.)</em></p>
<p>The second alternative shown in <a href="#Listing_6">Listing 6</a> uses
	the simpler syntax of
	<a href="https://docs.oracle.com/javase/tutorial/java/data/autoboxing.html">
	Autoboxing</a>.</p>

<h2><a name="referencetypes"></a>Reference types</h2>
<h3>Once again, what is a primitive 
type?</h3>
<p>Primitive types are types where the name of the variable 
evaluates to the value stored in the variable. </p>
<h3>What is a reference type?</h3>
<p>Reference types in Java are types where the name of the 
variable evaluates to a location in memory where the 
object referenced by the variable is stored. </p>

	
	





<div class="a">
					<p>
					<strong>The above statement may not really be true!</strong></p>
					<p>However, we can think of it that way. Depending on the particular JVM in use, the reference variable may 
				refer to a table in memory where the address of the object is stored. In that case the second level of indirection is handled behind the scenes and we don't have to worry about it. 

					</p>
					<p>Why would a JVM elect to implement another level of indirection? Wouldn't that make programs run more slowly?

					</p>
					<p>One reason has to do with the need to compact memory when it becomes highly fragmented. If the reference variables all refer directly to 
				memory locations containing the objects, there may be many reference variables that refer to the same object. If that object is moved for compaction purposes, then the values stored in every one of those reference variables would have to be modified. 
					</p>
					<p>However, if those reference variables all refer to a table that has one entry that specifies where the object is stored, then when the object is moved, only the value of that one entry in the table must be modified.
					</p>
					<p>Fortunately, that all takes place behind the scenes and we 
				as high-level Java programmers don&#39;t need to worry about it.</p>
</div>
	<h3>Primitive vs. reference variables</h3>
<p>We will discuss this in more detail in a future chapter. For now, suffice it 
to say that in Java, a variable is either a primitive type or a reference type, 
and cannot be both.</p>
<h3>Declaring, instantiating, initializing, and manipulating a reference 
variable</h3>
<p>The fragment of code shown in <a href="#Listing_7">Listing 7</a>, <em>(which was 
taken from the program shown in </em> <a href="#Listing_6"><em>Listing 6
</em>
</a><em>that deals with wrappers)</em> does the following. It</p>
<ul>
	<li>declares a reference variable of the type <strong>Double</strong> named <strong>myWrappedData</strong></li>
	<li>instantiates an object of the <strong>Double</strong> class</li>
	<li>initializes the variable with a reference to the object, and </li>
	<li>manipulates the variable</li>
</ul>
<p>In <a href="#Listing_7">Listing 7</a>, the variable named <strong>myWrappedData</strong> contains a reference to an 
object of type <strong>Double</strong>. </p>

<!--``1List07-->
<div class="a"><a name="Listing_7">Listing 7</a>. Aspects of using a 
				wrapper class.
<pre>
//Double myWrappedData = new Double(5.5);//deprecated
Double myWrappedData = 5.5;

//Code deleted for brevity

//Note the use of the doubleValue() method to obtain the
// value of the double wrapped in the Double object.
System.out.println
  (&quot;My wrapped double is &quot; + myWrappedData.doubleValue() );
</pre>

</div>
<!--``2-->

<h2><a name="variablenames"></a>Variable 
names</h2>
<p>The rules for naming variables are shown in <a href="#Figure_3">Figure 3</a>.</p>
	

	
	

	
	
<!--``1Fig003-->
				<div class="a">
					<p>
					<a name="Figure_3">Figure 3</a>. Rules for naming variables.
				
					</p>
				
<ul>
	<li>
	
		Must be a legal Java identifier <em>(see below) </em>consisting of a series of 
	Unicode characters. Unicode characters are stored in sixteen bits, allowing 
	for a very large number of different characters. A subset of the possible 
	character values matches the 127 possible characters in the ASCII character 
	set, and the extended 8-bit character set, ISO-Latin-1 <em>(The Java 
	Handbook, page 60, by Patrick Naughton).</em> 
	
	</li>
	<li>
	
		Must not be the same as a Java keyword and must not be true or false. 	
	
	</li>
	<li>
	
		Must not be the same as another variable whose declaration appears in 
	the same scope.
	</li>
</ul>

					<p><em>(Also see Kjell </em>
					<a href="http://programmedlessons.org/Java9/chap09/ch09_06.html">
					<em>Names for Variables</em></a><em>.) </em></p>
</div>

	<p>The rules for legal identifiers are shown in <a href="#Figure_4">Figure 4</a>.</p>
	

	
	

	
	
				
<div class="a">
	<p><a name="Figure_4">Figure 4</a>. Rules for legal 
				identifiers.
				
</p>
				
<ul>
	<li>

		In Java, a legal identifier is a sequence of Unicode letters and digits 
	of unlimited length. 

	</li>
	<li>

		The first character must be a letter. 

	</li>
	<li>

		All subsequent characters must be letters or numerals from any alphabet 
	that Unicode supports. 

	</li>
	<li>

		In addition, the underscore character (_) and the dollar sign ($) are 
	considered letters and may be used as any character including the first 
	one.
	</li>
</ul>

					<p><em>(Also see Kjell </em>
					<a href="http://programmedlessons.org/Java9/chap09/ch09_06.html">
					<em>Names for Variables</em></a><em>.) </em></p>

</div>


<h1><a name="scope"></a>Scope</h1>
<h2>What is the scope of a Java 
variable?</h2>
<p>The scope of a Java variable is defined by the <em>block of 
code</em> within which the variable is accessible. </p>
<p><em>(Briefly, a block of code consists of none, one, or more statements 
enclosed by a pair of matching curly 
<a href="http://programmedlessons.org/Java9/chap06/ch06_04.html">brackets</a>. 
By the way, which is correct, brackets or braces (see Kjell
<a href="http://programmedlessons.org/Java9/chap06/ch06_19.html">Braces</a>). You decide. In any event, they 
look like this: {...})</em></p>
<p>The scope also determines when the variable is created <em>(memory 
set aside to contain the data stored in the variable)</em> and when it 
possibly becomes a candidate for destruction <em>(memory returned to the operating 
system for recycling and re-use)</em>. </p>
<h2>Scope categories</h2>
<p>The scope of a variable places it in one of the 
four categories shown in <a href="#Figure_5">Figure 5</a>.</p>
	
	

	
	

	

	
<div class="a">
					<p>
					<a name="Figure_5">Figure 5</a>. Scope categories.
</p>
<ul>
	<li>

		member variable 
	</li>
	<li>

		local variable 

	</li>
	<li>

		method parameter 

	</li>
	<li>

		exception handler parameter
	</li>
</ul>
</div>
	<h3>Member variable</h3>
<p>A member variable is a member of a class <em>(class variable)</em> or a 
member of an object instantiated from that class <em>(instance variable)</em>. It must be 
declared within a class, but not within the body of a method or constructor of 
the class.</p>
<h3>Local variable</h3>
<p>A local variable is a variable declared within the body of a method or 
constructor or within a block of code contained within the body of a method or 
constructor. <em>(You will learn about constructors in a future chapter.) (Also 
see Kjell 
<a href="http://programmedlessons.org/Java9/chap51/ch51_09.html#scope,_of_local_variable">Local Variables</a>.)</em></p>
<h3>Method parameters</h3>
<p>Method parameters are the formal arguments of a method. Method parameters are 
used to pass values into and out of methods. The scope of a method parameter is 
the entire method for which it is a parameter. <em>(Also see Kjell 
<a href="http://programmedlessons.org/Java9/chap51/ch51_05.html#scope,_of_formal_parameter">Scope of a Formal Parameter</a>.)</em></p>
<h3>Exception handler parameters</h3>
<p>Exception handler parameters are arguments to exception handlers. 
Exception handlers will be discussed in a future chapter. </p>
<h3>Illustrating different types of variables in Java</h3>
<p>The Java program shown in <a href="#Listing_8">Listing 8</a> illustrates </p>
<ul>
	<li>member variables <em>(class and instance)</em>, </li>
	<li>local variables, and </li>
	<li>method parameters. </li>
</ul>
<p>An illustration of exception handler parameters will be deferred until 
exception handlers are discussed in a future chapter. </p>
<!--``1List08-->
<div class="a"><a name="Listing_8">Listing 8</a>. The program named 
				member1.
<pre>
/*File member1.java Copyright, R.G.Baldwin
Illustrates class variables, instance
variables, local variables, and method parameters.

Output from this program is:

Class variable is 5
Instance variable is 6
Method parameter is 7
Local variable is 8

**********************************************************/
class member1 { //define the controlling class
  //declare and initialize class variable
  static int classVariable = 5;
  //declare and initialize instance variable
  int instanceVariable = 6;

  public static void main(String[] args){ //main method
    System.out.println(&quot;Class variable is &quot;
                                          + classVariable);

    //Instantiate an object of the class to allow for
    // access to instance variable and method.
    member1 obj = new member1();
    System.out.println(&quot;Instance variable is &quot;
                                   + obj.instanceVariable);
    obj.myMethod(7); //call the method

    //declare and initialize a local variable
    int localVariable = 8;
    System.out.println(&quot;Local variable is &quot;
                                          + localVariable);

  }//end main

  void myMethod(int methodParameter){
    System.out.println(&quot;Method parameter is &quot;
                                        + methodParameter);
  }//end myMethod
}//End member1 class.
</pre>

</div>
<!--``2-->
	<h3>Declaration of local variables</h3>
<p>In Java, local variables are declared within the body of a method <em>(or 
constructor)</em> or within a 
block of code contained within the body of a method <em>(or constructor)</em>. </p>
<h3>Scope of local variables</h3>
<p>The scope of a local variable extends from the point at which it is declared 
to the end of the block of code in which it is declared. </p>
<h3>What is a &quot;block&quot; of code?</h3>
<p>A block of code is defined by enclosing it within curly brackets as in { ... 
}. </p>
<p>
Therefore, the scope of a local variable can be the entire method, or can reduced by 
declaring it within a block of code within the method.  </p>
	
	
	
	

	
	

	

	




<div class="a">
					<p>
					<strong>Special case, scope within a for loop</strong>
</p>
					<p>Java treats the scope of a variable declared within the initialization clause of a 
				<strong>for</strong> statement to be limited to the total extent of the 
				<strong>for</strong> statement.</p>
					<p>A future chapter will explain what is meant by a <strong>for</strong> 
				statement or a <strong>for</strong> loop.</p>
					<p><em>(Also see Kjell 
					<a href="http://programmedlessons.org/Java9/chap25/ch25_02.html#scope,_for_variable_declared_in_a_for_statement">Declaring the Loop Control Variable</a>.)</em></p>
</div>
<h1><a name="initializationofvariables"></a>Initialization of 
variables</h1>

<h2>Initializing primitive local 
variables</h2>
<p>Local variables of primitive types can be initialized when they are declared 
using statements such the one shown in <a href="#Listing_9">Listing 9</a>. </p>
	
<!--``1List09-->
<div class="a"><a name="Listing_9">Listing 9</a>. Initialization of 
				variables.
<pre>
int MyVar, UrVar = 6, HisVar;</pre>

</div>
<!--``2-->
	<h2>Initializing member variables</h2>
<p>Member variables can also be initialized when they are declared. </p>
<p>In both cases, the type of the value used to initialize the variable must 
match the type of the variable. </p>
<h2>Initializing method parameters and exception handler parameters</h2>
<p>Method parameters and exception handler parameters are initialized by the 
values passed to the method or exception handler by the calling program. </p>
<h1><a name="Run_the_program">Run the programs</a></h1>
<p>I encourage you to copy the code from <a href="#Listing_1">Listing 1</a>,
<a href="#Listing_6">Listing 6</a>, and <a href="#Listing_8">Listing 8</a>. Compile the code and execute 
it. Experiment with the code, 
making changes, and observing the results of your changes. Make certain that you 
can explain why your changes behave as they do.</p>
	<h1><a name="Miscellaneous">Miscellaneous</a></h1>
	<p>This section contains a variety of miscellaneous information.</p>

<div class="a">
	<p>Housekeeping material</p>


				<ul>
					<li>Author: Prof. Richard G. Baldwin</li>
					<li>Chapter name: Jb0200: Variables</li>
					<li>File: Jb0200.htm
</li>
					<li>Revised: 06/14/22</li>
				</ul>
</div>


<p>-end- </p>


</body>
</html>
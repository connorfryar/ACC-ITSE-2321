<!--
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Jb0200r</title>
<style type="text/css">
a:link {color:#0000ff;}
a:visited {color:#cc00cc;}
a:active {color:#ff0000;}
p{color:black;}
h1{color:green}
h2{color: purple}
h3{color: gray}
b{color: #000000}
strong{color: #000000}
blockquote{color: purple}
ul{color: maroon}
ol{color: maroon}
table{border: 1px solid black}
th{border: 1px solid black}
a:hover {
	color: #cc0000;
	font-weight: bold;
	text-decoration: none;
}
.auto-style1 {
	text-align: center;
}
div.a {
  border: 2px solid black;

}

</style>
</head>

<body style="font-family: Arial,Helvetica,sans-serif;font-size: 12pt; background-color: #FEFFF0;"
>
<h1 class="auto-style1">Jb0200r: Review: Variables</h1>


<h1 class="style1">Table of Contents</h1>
<ul>
	<li><a href="#Preface">Preface</a></li>
	<li><a href="#Questions">Questions</a>
	<ul>
		<li><a href="#question01">1</a>, <a href="#question02">2</a>,
		<a href="#question03">3</a>, <a href="#question04">4</a>,
		<a href="#question05">5</a>, <a href="#question06">6</a>,
		<a href="#question07">7</a>, <a href="#question08">8</a>,
		<a href="#question09">9</a>, <a href="#question10">10</a>, 
		<a href="#question11">11</a>, <a href="#question12
">12</a>, 
		<a href="#question13">13</a>, 
		<a href="#question14">14</a>, 
		<a href="#question15">15</a>,
		<a href="#question16">16</a>,
		<a href="#question17">17</a>, 
		<a href="#question18">18</a>,
		<a href="#question19">19</a>,
		<a href="#question20">20</a>,
		<a href="#question21">21</a>,
		<a href="#question22">22</a>,
		<a href="#question23">23</a>,
		<a href="#question24">24</a>,
		<a href="#question25">25</a>,
<a href="#question26">26</a>,
		<a href="#question27">27</a>,
		<a href="#question28">28</a>,
		<a href="#question29">29</a>,
		<a href="#question30">30</a>,
		<a href="#question31">31</a>,
		<a href="#question32">32</a>,
		<a href="#question33">33</a>,
		<a href="#question34">34</a>,
		<a href="#question35">35</a>,
		<a href="#question36">36</a>,
		<a href="#question37">37</a>,
		<a href="#question38">38</a>,
		<a href="#question39">39</a></li>
	</ul>
	</li>
	<li><a href="#Listings">Listings</a></li>
	<li><a href="#Answers">Answers</a></li>
	<li><a href="#Miscellaneous">Miscellaneous</a></li>
</ul>
<h1><a name="Preface">Preface</a></h1>
<p>This chapter contains review questions and answers keyed to the chapter titled 
<em><a href="Jb0200.htm">Jb0200: Java OOP: Variables</a>.</em></p>
<p>The questions and the answers are connected by hyperlinks to make it easy for 
you to navigate from the question to the answer and back again. </p>
<h1><a name="Questions">Questions</a></h1>

<h2><a name="question01">Question 1</a><b>. </b> </h2>
<p>Write a Java application that reads characters from the keyboard until 
encountering the # character. Echo each character to the screen as it is read. 
Terminate the program when the user enters the # character. </p>
<p><a href="#answer01">Answer 1</a> </p>

<h2><a name="question02">Question 2</a></h2>
<p>What is the common name for the Java program element that is used to contain 
data that may change during the execution of the program? </p>
<p><a href="#answer02">Answer 2</a> </p>

<h2><a name="question03">Question 3</a> </h2>
<p>What must you do to make a variable available for use in a Java program? </p>
<p><a href="#answer03">Answer 3</a> </p>

<h2><a name="question04">Question 4</a></h2>
<p>True or false? In Java, you are required to initialize the value of all 
variables when they are declared.</p>
<p><a href="#answer04">Answer 4</a> </p>

<h2><a name="question05">Question 5</a></h2>
<p>Show the proper syntax for declaring two variables and initializing one of 
them using a single Java statement. </p>
<p><a href="#answer05">Answer 5</a></p>

<h2><a name="question06">Question 6</a></h2>
<p>True or false? The Java compiler will accept statements with type mismatches 
provided that a suitable type conversion can be implemented by the compiler at 
compile time.</p>
<p><a href="#answer06">Answer 6</a> </p>

<h2><a name="question07">Question 7</a></h2>
<p>Show the proper syntax for the declaration of a variable of type <b>String[]</b> 
in the argument list of the <b>main</b> method of a Java program and explain its 
purpose. </p>
<p><a href="#answer07">Answer 7</a></p>

<h2><a name="question08">Question 8</a> </h2>
<p>Describe the purpose of the type definition in Java. </p>
<p><a href="#answer08">Answer 8</a> </p>

<h2><a name="question09">Question 9</a></h2>
<p>True or false? Variables of type <b>int</b> can contain either signed or 
unsigned values.</p>
<p><a href="#answer09">Answer 9</a> </p>

<h2><a name="question10">Question 10</a></h2>
<p>What is the important characteristic of type definitions in Java that 
strongly supports the concept of <i>platform independence</i> of compiled Java 
programs? </p>
<p><a href="#answer10">Answer 10</a></p>
	
<h2><a name="question11">Question 11</a></h2>
<p>What are the two major categories of types in Java? </p>
<p><a href="#answer11">Answer 11</a></p>
	
<h2><a name="question12">Question 12</a></h2>
<p>What is the maximum number of values that can be stored in a variable of a <i>
primitive</i> type in Java? </p>
<p><a href="#answer12">Answer 12</a></p>
	
<h2><a name="question13">Question 13</a></h2>
<p>List the <i>primitive</i> types in Java. </p>
<p><a href="#answer13">Answer 13</a></p>
	
<h2><a name="question14">Question 14</a></h2>
<p>True or false? Java stores variables of type <b>char</b> according to the 
8-bit extended ASCII table.</p>
<p><a href="#answer14">Answer 14</a></p>
	
<h2><a name="question15">Question 15</a></h2>
<p>True or false? In Java, the name of a <i>primitive</i> variable evaluates to 
the value stored in the variable.</p>
<p><a href="#answer15">Answer 15</a></p>
	
<h2><a name="question16">Question 16</a></h2>
<p>True or false? Variables of <i>primitive</i> data types in Java are true 
objects.</p>
<p><a href="#answer16">Answer 16</a></p>

<h2><a name="question17">Question 17</a></h2>
<p>Why do we care that variables of <i>primitive</i> types are not true objects? </p>
<p><a href="#answer17">Answer 17</a></p>

<h2><a name="question18">Question 18</a></h2>
<p>What is the name of the mechanism commonly used to convert variables of <i>
primitive</i> types to true objects? </p>
<p><a href="#answer18">Answer 18</a></p>

<h2><a name="question19">Question 19</a></h2>
<p>How can you tell the difference between a <i>primitive</i> type and a <i>
wrapper</i> for the primitive type when the two are spelled the same? </p>
<p><a href="#answer19">Answer 19</a></p>

<h2><a name="question20">Question 20</a></h2>
<p>Show the proper syntax for declaring a variable of type <b>double</b> and 
initializing its value to 5.5. </p>
<p><a href="#answer20">Answer 20</a></p>

<h2><a name="question21">Question 21</a></h2>
<p>Show the proper syntax for declaring a variable of type <b>Double</b> and 
initializing its value to 5.5. </p>
<p><a href="#answer21">Answer 21</a></p>

<h2><a name="question22">Question 22</a></h2>
<p>Show the proper syntax for extracting the value from a variable of type <b>
Double</b>. </p>
<p><a href="#answer22">Answer 22</a></p>

<h2><a name="question23">Question 23</a></h2>
<p>True or false? In Java, the name of a reference variable evaluates to either 
null, or to information that can be used to access an object whose reference has 
been stored in the variable.</p>
<p><a href="#answer23">Answer 23</a></p>

<h2><a name="question24">Question 24</a></h2>
<p>What is a <i>legal identifier</i> in Java? </p>
<p><a href="#answer24">Answer 24</a></p>

<h2><a name="question25">Question 25</a></h2>
<p>What are the rules for variable names in Java? </p>
<p><a href="#answer25">Answer 25</a></p>


<h2><a name="question26">Question 26</a></h2>
<p>What is meant by the <i>scope</i> of a Java variable? </p>
<p><a href="#answer26">Answer 26</a></p>

<h2><a name="question27">Question 27</a></h2>
<p>What are the four possible <i>scope </i>categories for a Java variable? </p>
<p><a href="#answer27">Answer 27</a></p>

<h2><a name="question28">Question 28</a></h2>
<p>What is a member variable? </p>
<p><a href="#answer28">Answer 28</a></p>

<h2><a name="question29">Question 29</a></h2>
<p>Where are <i>local variables</i> declared in Java? </p>
<p><a href="#answer29">Answer 29</a></p>

<h2><a name="question30">Question 30</a></h2>
<p>What is the scope of a local variable in Java?</p>
<p><a href="#answer30">Answer 30</a></p>

<h2><a name="question31">Question 31</a></h2>
<p>What defines a <i>block</i> of code in Java? </p>
<p><a href="#answer31">Answer 31</a></p>

<h2><a name="question32">Question 32</a></h2>
<p>What is the scope of a variable that is declared within a block of code that 
is defined within a method and which is a subset of the statements that make up 
the method? </p>
<p><a href="#answer32">Answer 32</a></p>

<h2><a name="question33">Question 33</a></h2>
<p>What is the scope of a variable declared within the initialization clause of 
a <i>for</i> statement in Java? Provide an example code fragment. </p>
<p><a href="#answer33">Answer 33</a></p>

<h2><a name="question34">Question 34</a></h2>
<p>What are <i>method parameters</i> and what are they used for? </p>
<p><a href="#answer34">Answer 34</a></p>

<h2><a name="question35">Question 35</a></h2>
<p>What is the scope of a <i>method parameter</i>? </p>
<p><a href="#answer35">Answer 35</a></p>

<h2><a name="question36">Question 36</a></h2>
<p>What are <i>exception handler parameters</i>? </p>
<p><a href="#answer36">Answer 36</a></p>

<h2><a name="question37">Question 37</a></h2>
<p>Write a Java application that illustrates member variables <em>(class and 
instance)</em>, local variables, and method parameters.</p>
<p><a href="#answer37">Answer 37</a></p>

<h2><a name="question38">Question 38</a></h2>
<p>True or false? Member variables in a Java class can be initialized when the 
class is defined.</p>
<p><a href="#answer38">Answer 38</a></p>

<h2><a name="question39">Question 39</a></h2>
<p>How are <i>method parameters</i> initialized in Java? </p>
<p><a href="#answer39">Answer 39</a></p>



<h1><a name="Listings">Listings</a></h1>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Listing for Answer 22.</li>
	<li><a href="#Listing_2">Listing 2</a>. Listing for Answer 1. </li>
</ul>

<hr/>


<p>Additional review questions with answers are provided in the appendix to this 
eBook. It is highly recommended that you study that material also.</p>
<hr/>
<h1><a name="Answers">Answers</a></h1>


<h2><a name="answer39">Answer 39</a></h2>
<p><i>Method parameters</i> are initialized by the values passed to the method. </p>
<p><a href="#question39">Back to Question 39</a> </p>

<h2><a name="answer38">Answer 38</a></h2>
<p>True.</p>
<p><a href="#question38">Back to Question 38</a> </p>

<h2><a name="answer37">Answer 37</a></h2>
<p>See the application named <b>member1</b> in
the chapter named <em><a href="Jb0200.htm">Jb0200: Variables</a></em> for an 
example of such an application.</p>
<p><a href="#question37">Back to Question 37</a> </p>

<h2><a name="answer36">Answer 36</a></h2>
<p><i>Exception handler parameters</i> are arguments to exception handlers, 
which will be discussed in a future chapter. </p>
<p><a href="#question36">Back to Question 36</a> </p>

<h2><a name="answer35">Answer 35</a></h2>
<p>The scope of a method parameter is the entire method for which it is a 
parameter.</p>
<p><a href="#question35">Back to Question 35</a> </p>

<h2><a name="answer34">Answer 34</a></h2>
<p><i>Method parameters</i> are the formal arguments of a method. Method 
parameters are used to pass values into and out of methods.</p>
<p><a href="#question34">Back to Question 34</a> </p>

<h2><a name="answer33">Answer 33</a></h2>
<p>Java treats the scope of a variable declared within the initialization clause 
of a <i>for</i> statement to be limited to the total extent of the <i>for</i> 
statement. A sample code fragment follows where <strong>cnt</strong> is the 
variable being discussed:</p>



<div class="a">
A sample code fragment

				<pre>
for(int cnt = 0; cnt &lt; max; cnt++){
  //do something
}//end of <i>for </i>statement</pre>
</div>
	
	
	
<p><a href="#question33">Back to Question 33</a> </p>

<h2><a name="answer32">Answer 32</a></h2>
<p>In Java, the scope can be reduced by placing it within a block of code within 
the method. The <i>scope</i> extends from the point at which it is declared to 
the end of the block of code in which it is declared. </p>
<p><a href="#question32">Back to Question 32</a> </p>

<h2><a name="answer31">Answer 31</a></h2>
<p>A block of code is defined by enclosing it within curly brackets as shown 
below</p>
<pre><b>{...}</b></pre>
<p><a href="#question31">Back to Question 31</a> </p>

<h2><a name="answer30">Answer 30</a></h2>
<p>The <i>scope</i> of a local variable extends from the point at which it is 
declared to the end of the block of code in which it is declared. </p>
<p><a href="#question30">Back to Question 30</a> </p>

<h2><a name="answer29">Answer 29</a></h2>
<p>In Java, <i>local variables</i> are declared within the body of a method or 
constructor, or within a block of code contained within the body of a method or 
constructor. </p>
<p><a href="#question29">Back to Question 29</a> </p>

<h2><a name="answer28">Answer 28</a></h2>
<p>A <i>member variable</i> is a member of a class (<i>class</i> variable) or a 
member of an object instantiated from that class (<i>instance</i> variable). It 
must be declared within a class, but not within the body of a method or 
constructor of the class.</p>
<p><a href="#question28">Back to Question 28</a> </p>

<h2><a name="answer27">Answer 27</a></h2>
<p>The <i>scope</i> of a variable places it in one of the following four 
categories:</p>
<ul>
	<li>member variable </li>
	<li>local variable </li>
	<li>method parameter </li>
	<li>exception handler parameter</li>
</ul>
<p><a href="#question27">Back to Question 27</a> </p>

<h2><a name="answer26">Answer 26</a></h2>
<p>The <i>scope</i> of a Java variable is the block of code within which the 
variable is accessible. </p>
<p><a href="#question26">Back to Question 26</a> </p>




<h2><a name="answer25">Answer 25</a></h2>
<p>The rules for Java variable names are as follows:</p>
<ul>
	<li>Must be a legal Java identifier consisting of a series of <i>Unicode</i> 
	characters. </li>
	<li>Must not be the same as a Java <i>keyword </i>and must not be <i>true</i> 
	or <i>false.</i> </li>
	<li>Must not be the same as another variable whose declaration appears in 
	the same scope.</li>
</ul>
<p><a href="#question25">Back to Question 25</a> </p>

<h2><a name="answer24">Answer 24</a></h2>
<p>In Java, a legal identifier is a sequence of Unicode letters and digits of 
unlimited length. The first character must be a letter. All subsequent 
characters must be letters or numerals from any alphabet that Unicode supports. 
In addition, the underscore character (<b>_</b>) and the dollar sign (<b>$</b>) 
are considered letters and may be used as any character including the first one. </p>
<p><a href="#question24">Back to Question 24</a> </p>

<h2><a name="answer23">Answer 23</a></h2>
<p>True. </p>
<p><a href="#question23">Back to Question 23</a> </p>

<h2><a name="answer22">Answer 22</a></h2>
<p>Later versions of Java support either syntax shown in <a href="#Listing_1">Listing 1</a>.</p>
<!--``1List01-->
<div class="a"><a name="Listing_1">Listing 1</a>. Listing for Answer 22.

<pre>
class test{
  public static void main(String[] args){
    Double var1 = 5.5;
    double var2 = var1.doubleValue();
    System.out.println(var2);

    double var3 = var1;
    System.out.println(var3);
  }//end main
}//end class test
</pre>

</div>
<!--``2-->


<p><a href="#question22">Back to Question 22</a> </p>

<h2><a name="answer21">Answer 21</a></h2>



<p>The proper syntax for early versions of Java is shown below. Note the 
upper-case <strong>D</strong>. Also note the instantiation of a new object of 
type <strong>Double</strong>.</p>



<div class="a">
A code fragment
<pre>
Double myWrappedData = new Double(5.5);</pre>
</div>
	<p>Later versions of Java support the following syntax with the new 
	object of type <strong>Double</strong> being instantiated automatically:</p>
	
	
	
<div class="a">
A code fragment
<pre>
Double myWrappedData = 5.5;</pre>
</div>
<p><a href="#question21">Back to Question 21</a> </p>

<h2><a name="answer20">Answer 20</a></h2>



<p>The proper syntax is shown below. Note the lower-case <strong>d</strong>.</p>



<div class="a">
A code fragment
<pre>
double myPrimitiveData = 5.5;</pre>
</div>
<p><a href="#question20">Back to Question 20</a> </p>

<h2><a name="answer19">Answer 19</a></h2>
<p>The name of the <i>primitive</i> type begins with a lower-case letter and the 
name of the <i>wrapper</i> type begins with an upper-case letter such as <b>
double</b> and <b>Double</b>. Note that in some cases, however, they are 
not spelled the same. For example, the <strong>Integer</strong> class is the 
wrapper for type <strong>int</strong>.</p>
<p><a href="#question19">Back to Question 19</a> </p>

<h2><a name="answer18">Answer 18</a></h2>
<p>Wrapper classes </p>
<p><a href="#question18">Back to Question 18</a> </p>

<h2><a name="answer17">Answer 17</a></h2>
<p>This has some ramifications as to how variables can be used <em>(passing to 
methods, returning from methods, etc.)</em>. For example, all variables of <i>
primitive</i> types are passed by value to methods meaning that the code in the 
method only has access to a copy of the variable and does not have the ability 
to modify the variable. </p>
<p><a href="#question17">Back to Question 17</a> </p>

<h2><a name="answer16">Answer 16</a></h2>
<p>False. Primitive data types in Java <em>(int, double, etc.)</em> are not true 
objects. </p>
<p><a href="#question16">Back to Question 16</a> </p>



<h2><a name="answer15">Answer 15</a></h2>
<p>True. </p>
<p><a href="#question15">Back to Question 15</a> </p>


<h2><a name="answer14">Answer 14</a></h2>
<p>False. The <b>char</b> type in Java is a 16-bit Unicode character. </p>
<p><a href="#question14">Back to Question 14</a> </p>


<h2><a name="answer13">Answer 13</a></h2>
<ul>
	<li>byte</li>
	<li>short</li>
	<li>int</li>
	<li>long</li>
	<li>float</li>
	<li>double</li>
	<li>char</li>
	<li>boolean </li>
</ul>
<p><a href="#question13">Back to Question 13</a> </p>


<h2><a name="answer12">Answer 12</a></h2>
<p>Primitive types contain a single value. </p>
<p><a href="#question12">Back to Question 12</a> </p>

<h2><a name="answer11">Answer 11</a></h2>
<p>Java supports both <i>primitive</i> types and <i>reference</i> 
types. </p>
<p><a href="#question11">Back to Question 11</a> </p>


<h2><a name="answer10">Answer 10</a></h2>
<p>In Java, a variable of a specified type is represented the same way 
regardless of the platform on which the application is being executed. </p>
<p><a href="#question10">Back to Question 10</a> </p>



<h2><a name="answer09">Answer 9</a> </h2>
<p>False. In Java, all variables of type <b>int</b> contain signed values. </p>
<p><a href="#question09">Back to Question 9</a> </p>
<h2><a name="answer08">Answer 8</a> </h2>
<p>All variables in Java must have a defined <i>type</i>. The definition of the <i>type</i> 
determines the set of values that can be stored in the variable and the 
operations that can be performed using the variable.</p>
<p><a href="#question08">Back to Question 8</a> </p>
<h2><a name="answer07">Answer 7</a> </h2>
<p>The syntax is shown below:</p>



<div class="a">
Proper syntax for the declaration of a variable of type String[]


				<pre>public static void main(String[] args) </pre>
</div>
	
<p>In this case, the type of variable declared is an array of type <b>String</b> 
named <b>args </b><em>(type String[])</em>. The purpose of the <b>String</b> array variable in the 
argument list is to make it possible to capture arguments entered on the command 
line. </p>
<p><a href="#question07">Back to Question 7</a> </p>

<h2><a name="answer06">Answer 6</a></h2>
<p>False. Fortunately, Java provides very strict type checking and generally 
refuses to compile statements with type mismatches. </p>
<p><a href="#question06">Back to Question 6</a> </p>


<h2><a name="answer05">Answer 5</a></h2>



<div class="a">
A code fragment
<pre>
int firstVariable, secondVariable = 10; </pre>
</div>
<p><a href="#question05">Back to Question 5</a> </p>
<h2><a name="answer04">Answer 4</a> </h2>
<p>False: In Java, it is possible to initialize the value of a variable when it 
is declared, but initialization is not required. <em>(Note however that in some 
situations, the usage of the variable may require that it be purposely initialized.)</em>.</p>
<p><a href="#question04">Back to Question 4</a> </p>
<h2><a name="answer03">Answer 3</a> </h2>
<p>To use a variable, you must notify the compiler of the name and the type of 
the variable <i>(declare the variable). </i> </p>
<p><a href="#question03">Back to Question 3</a> </p>
<h2><a name="answer02">Answer 2</a></h2>
<p>variable</p>
<p><a href="#question02">Back to Question 2</a> </p>


<h2><a name="answer01">Answer 1</a> </h2>

<!--``1List02-->
<div class="a"><a name="Listing_2">Listing 2</a>. Listing for Answer 1.

<pre>
/*File simple4.java
This application reads characters from the keyboard until 
encountering the # character and echoes each character to 
the screen. The program terminates when the user enters 
the # character.
**********************************************************/
class simple4 { //define the controlling class
  public static void main(String[] args) 
                               throws java.io.IOException {
    int ch1 = 0;
    System.out.println(
                      &quot;Enter some text, terminate with #&quot;);
    while( (ch1 = System.in.read() ) != &#39;#&#39;) 
      System.out.print((char)ch1);
    System.out.println(&quot;Goodbye&quot;);
  }//end main
}//End simple4 class.
</pre>

</div>
<!--``2-->


<p><a href="#question01">Back to Question 1</a> </p>

<h1><a name="Miscellaneous">Miscellaneous</a></h1>
<p>This section contains a variety of miscellaneous information. </p>

<div class="a">
	<p>Housekeeping material</p>
 

			<ul>
				<li>Author: Prof. Richard G. Baldwin</li>
				<li>Chapter name: Jb0200r: Review: Variables</li>
				<li>File: Jb0200r.htm </li>
				<li>Revised: 06/05/22</li>
			</ul>
</div>


<p>-end- </p>


</body>
</html>
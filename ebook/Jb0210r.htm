<!--
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Jb0210r</title>
<style type="text/css">
a:link {color:#0000ff;}
a:visited {color:#cc00cc;}
a:active {color:#ff0000;}
p{color:black;}
h1{color:green}
h2{color: purple}
h3{color: gray}
b{color: #000000}
strong{color: #000000}
blockquote{color: purple}
ul{color: maroon}
ol{color: maroon}
table{border: 1px solid black}
th{border: 1px solid black}
a:hover {
	color: #cc0000;
	font-weight: bold;
	text-decoration: none;
}
.auto-style1 {
	text-align: center;
}
div.a {
  border: 2px solid black;
}
</style>
</head>

<body style="font-family: Arial,Helvetica,sans-serif;font-size: 12pt; background-color: #FEFFF0;"
>
<h1 class="auto-style1">Jb0210r Review: Operators</h1>


<h1 class="style1">Table of Contents</h1>
<ul>
	<li><a href="#Preface">Preface</a></li>
	<li><a href="#Questions">Questions</a>
	<ul>
		<li><a href="#question01">1</a>, <a href="#question02">2</a>,
		<a href="#question03">3</a>, <a href="#question04">4</a>,
		<a href="#question05">5</a>, <a href="#question06">6</a>,
		<a href="#question07">7</a>, <a href="#question08">8</a>,
		<a href="#question09">9</a>, <a href="#question10">10</a>, 
		<a href="#question11">11</a>, <a href="#question12">12</a>, 
		<a href="#question13">13</a>, 
		<a href="#question14">14</a>, 
		<a href="#question15">15</a>,
		<a href="#question16">16</a>,
		<a href="#question17">17</a>, 
		<a href="#question18">18</a>,
		<a href="#question19">19</a>,
		<a href="#question20">20</a>,
		<a href="#question21">21</a>,
		<a href="#question22">22</a>,
		<a href="#question23">23</a>,
		<a href="#question24">24</a>,
		<a href="#question25">25</a>,
		<a href="#question26">26</a>,
		<a href="#question27">27</a>,
		<a href="#question28">28</a>,
		<a href="#question29">29</a>,
		<a href="#question30">30</a>,
		<a href="#question31">31</a>,
		<a href="#question32">32</a>,
		<a href="#question33">33</a>,
		<a href="#question34">34</a>,
		<a href="#question35">35</a>,
		<a href="#question36">36</a>,
		<a href="#question37">37</a>,
		<a href="#question38">38</a></li>
	</ul>
	</li>
	<li><a href="#Listings">Listings</a></li>
	<li><a href="#Answers">Answers</a></li>
	<li><a href="#Miscellaneous">Miscellaneous</a></li>
</ul>
<h1><a name="Preface">Preface</a></h1>
<p>This chapter contains review questions and answers keyed to the chapter titled 
<em>Jb0210: Java OOP: Operators.</em></p>
<p>The questions and the answers are connected by hyperlinks to make it easy for 
you to navigate from the question to the answer and back again. </p>
<h1><a name="Questions">Questions</a></h1>

<h2><a name="question01">Question 1</a><b>. </b> </h2>
<p>An operator performs an action on what? Provide the name. </p>
<p><a href="#answer01">Answer 1</a> </p>

<h2><a name="question02">Question 2</a></h2>
<p>What do we call an operator that operates on only one operand? </p>
<p><a href="#answer02">Answer 2</a> </p>

<h2><a name="question03">Question 3</a> </h2>
<p>What do we call an operator that operates on two operands? </p>
<p><a href="#answer03">Answer 3</a> </p>

<h2><a name="question04">Question 4</a></h2>
<p>Is the minus sign a <em>unary</em> or a <em>binary</em> operator, or both? 
Explain your answer. </p>
<p><a href="#answer04">Answer 4</a> </p>

<h2><a name="question05">Question 5</a></h2>
<p>Describe operator overloading. </p>
<p><a href="#answer05">Answer 5</a></p>

<h2><a name="question06">Question 6</a></h2>
<p>True or false? Java programmers may overload operators.</p>
<p><a href="#answer06">Answer 6</a> </p>

<h2><a name="question07">Question 7</a></h2>
<p>Show the symbols used for the following operators in Java: <i>assignment</i>,
<i>not equal</i>, <i>addition</i>, <i>cast</i>. </p>
<p><a href="#answer07">Answer 7</a></p>

<h2><a name="question08">Question 8</a> </h2>
<p>Are any operators automatically overloaded in Java? If so, identify one and 
describe its overloaded behavior. </p>
<p><a href="#answer08">Answer 8</a> </p>

<h2><a name="question09">Question 9</a></h2>
<p>What is the purpose of the cast operator? </p>
<p><a href="#answer09">Answer 9</a> </p>

<h2><a name="question10">Question 10</a></h2>
<p>True or false? The increment operator is a <em>binary</em> operator.</p>
<p><a href="#answer10">Answer 10</a></p>
	
<h2><a name="question11">Question 11</a></h2>
<p>Show the symbol for the increment operator.</p>
<p><a href="#answer11">Answer 11</a></p>
	
<h2><a name="question12">Question 12</a></h2>
<p>Describe the appearance and the behavior of the increment operator with both
<i>prefix</i> and <i>postfix</i> notation. Show example, possibly incomplete, 
code fragments illustrating both notational forms. </p>
<p><a href="#answer12">Answer 12</a></p>
	
<h2><a name="question13">Question 13</a></h2>
<p>Show the output that would be produced by the Java application in 
<a href="#Listing_1">Listing 1</a>. </p>
<!--``1List01-->
<div class="a">				<p><a name="Listing_1">Listing 1</a>. Listing for Question 
				13.
</p>
<pre>
class incr01 { //define the controlling class
  public static void main(String[] args){ //define main
    int x = 5, X = 5, y = 5, Y = 5;
    System.out.println(&quot;x = &quot; + x );
    System.out.println(&quot;X = &quot; + X );
    System.out.println(&quot;x + X++ = &quot; + (x + X++) );
    System.out.println(&quot;X = &quot; + X );
    System.out.println();
    System.out.println(&quot;y = &quot; + y );
    System.out.println(&quot;Y = &quot; + Y );
    System.out.println(&quot;y + ++Y = &quot; + (y + ++Y) );
    System.out.println(&quot;Y = &quot; + Y );    
  }//end main
}//End incr01 class.  Note no semicolon required
//End Java application
</pre>

</div><!--``2-->
<p><a href="#answer13">Answer 13</a></p>
	
<h2><a name="question14">Question 14</a></h2>
<p>True or false? <i>Binary</i> operators use <i>outfix</i> notation. If your 
answer is False, explain why. </p>
<p><a href="#answer14">Answer 14</a></p>
	
<h2><a name="question15">Question 15</a></h2>
<p>In practice, what does it mean to say that an operator that has performed an 
action returns a value <em>(or evaluates to a value) </em>of a given type? </p>
<p><a href="#answer15">Answer 15</a></p>
	
<h2><a name="question16">Question 16</a></h2>
<p>Show and describe at least five of the <i>binary arithmetic</i> operators 
supported by Java (Clarification: <i>binary</i> operators does not mean <i>
bitwise</i> operators). </p>
<p><a href="#answer16">Answer 16</a></p>

<h2><a name="question17">Question 17</a></h2>
<p>In addition to arithmetic addition, what is another use for the plus operator
<em>(+)</em>? Show an example code fragment to illustrate your answer. The code 
fragment need not be a complete statement. </p>
<p><a href="#answer17">Answer 17</a></p>

<h2><a name="question18">Question 18</a></h2>
<p>When the plus operator <em>(+)</em> is used as a concatenation operator, what 
is the nature of its behavior if its left operand is of type <strong>String</strong> 
and its right operand is not of type <strong>String</strong>? If the right 
operand is a variable that is not of type <strong>String</strong>, what is the 
impact of this behavior on that variable. </p>
<p><a href="#answer18">Answer 18</a></p>

<h2><a name="question19">Question 19</a></h2>
<p>Show and describe four <i>unary</i> arithmetic operators supported by Java.</p>
<p><a href="#answer19">Answer 19</a></p>

<h2><a name="question20">Question 20</a></h2>
<p>What is the type returned by <i>relational</i> operators in Java?</p>
<p><a href="#answer20">Answer 20</a></p>

<h2><a name="question21">Question 21</a></h2>
<p>Show and describe six different <i>relational</i> operators supported by 
Java. </p>
<p><a href="#answer21">Answer 21</a></p>

<h2><a name="question22">Question 22</a></h2>
<p>Show the output that would be produced by the Java application shown in 
<a href="#Listing_2">Listing 2</a>. </p>
<!--``1List02-->
<div class="a">				<p><a name="Listing_2">Listing 2</a>. Listing for Question 
				22.
</p>
<pre>
class relat01 { //define the controlling class
  public static void main(String[] args){ //define main
    System.out.println(&quot;The relational 6&lt;5 is &quot; + (6&lt;5 ));
    System.out.println(&quot;The relational 6&gt;5 is &quot; + (6&gt;5 ));
  }//end main
}//End relat01 class.  Note no semicolon required
//End Java application
</pre>
</div><!--``2-->
<p><a href="#answer22">Answer 22</a></p>

<h2><a name="question23">Question 23</a></h2>
<p>Show and describe three operators <i>(frequently referred to as conditional 
or logical operators) </i>that are often combined with relational operators to 
construct more complex expressions <i>(often called conditional expressions)</i>. 
Hint: The <strong>||</strong> operator returns true if either the left operand, the right 
operand, or both operands are true. What are the other two and how do they 
behave? </p>
<p><a href="#answer23">Answer 23</a></p>

<h2><a name="question24">Question 24</a></h2>
<p>Describe the special behavior of the <strong>||</strong> operator in the 
following expression for the case where the value of the variable <strong>a</strong> 
is less than the value of the variable <strong>b</strong>. </p>



<div class="a">				<pre>
(a &lt; b) || (c &lt; d)</pre>
</div><p><a href="#answer24">Answer 24</a></p>

<h2><a name="question25">Question 25</a></h2>
<p>Show the symbols used for the bitwise <i>and</i> operator and the bitwise <i>
inclusive or</i> 
operator. </p>
<p><a href="#answer25">Answer 25</a></p>



<h2><a name="question26">Question 26</a></h2>
<p>Show and describe seven operators in Java that perform actions on the operands 
one bit at a time <i>(bitwise operators)</i>. </p>
<p><a href="#answer26">Answer 26</a></p>

<h2><a name="question27">Question 27</a></h2>
<p>True or false? In Java, the <i>signed</i> right shift operation populates the 
vacated bits with the zeros, while the left shift and the <i>unsigned</i> right 
shift populate the vacated bits with the sign bit. If your answer is False, 
explain why. </p>
<p><a href="#answer27">Answer 27</a></p>

<h2><a name="question28">Question 28</a></h2>
<p>True or false? In a <i>signed</i> right-shift operation in Java, the bits 
shifted off the right end are lost. If your answer is False, explain why. </p>
<p><a href="#answer28">Answer 28</a></p>

<h2><a name="question29">Question 29</a></h2>
<p>Using the symbols 1 and 0, construct a truth table showing the four possible 
combinations of 1 and 0. Using a 1 or a 0, show the result of the <i>bitwise</i>
<i>and</i> operation on these four combinations of 1 and 0. </p>
<p><a href="#answer29">Answer 29</a></p>

<h2><a name="question30">Question 30</a></h2>
<p>Using the symbols 1 and 0 construct a truth table showing the four possible 
combinations of 1 and 0. Using a 1 or a 0, show the result of the <i>bitwise</i>
<i>inclusive or</i> operation on these four combinations of 1 and 0. </p>
<p><a href="#answer30">Answer 30</a></p>

<h2><a name="question31">Question 31</a></h2>
<p>Using the symbols 1 and 0 construct a truth table showing the four possible 
combinations of 1 and 0. Using a 1 or a 0, show the result of the <i>bitwise</i>
<i>exclusive or</i> operation on these four combinations of 1 and 0. </p>
<p><a href="#answer31">Answer 31</a></p>

<h2><a name="question32">Question 32</a></h2>
<p>True or false? For the <i>exclusive or</i>, if the two bits are different, 
the result is a 1. If the two bits are the same, the result is a 0. If your 
answer is False, explain why. </p>
<p><a href="#answer32">Answer 32</a></p>

<h2><a name="question33">Question 33</a></h2>
<p>Is the <i>assignment </i>operator a <i>unary </i>operator or a <i>binary </i>
operator. Select one or the other. </p>
<p><a href="#answer33">Answer 33</a></p>

<h2><a name="question34">Question 34</a></h2>
<p>True or false? In Java, when using the assignment operator, the value stored 
in memory and represented by the right operand is copied into the memory 
represented by the left operand. If your answer is False, explain why. </p>
<p><a href="#answer34">Answer 34</a></p>

<h2><a name="question35">Question 35</a></h2>
<p>Show two of the <i>shortcut</i> assignment operators and explain how they 
behave by comparing them with the regular <em>(non-shortcut)</em> versions. 
Hint: the <em>(^=)</em> operator is a <i>shortcut</i> assignment operator. </p>
<p><a href="#answer35">Answer 35</a></p>

<h2><a name="question36">Question 36</a></h2>
<p>Write a Java
application that clearly illustrates the difference between
the prefix and the postfix versions of the increment 
operator. Provide a termination message that displays your name.</p>
<p><a href="#answer36">Answer 36</a></p>

<h2><a name="question37">Question 37</a></h2>
<p>Write a Java
application that illustrates the use of the following
relational operators:
  
</p>



<div class="a">				<pre>
&lt; 
&gt; 
&lt;= 
&gt;= 
== 
!=</pre>
</div><p>Provide appropriate text in the output.  Also provide
a termination message with your name.</p>
<p><a href="#answer37">Answer 37</a></p>

<h2><a name="question38">Question 38</a></h2>
<p>write a Java
application that illustrates the use of the following
logical or conditional operators:
  
</p>
	



<div class="a"><pre>
&amp;&amp; 
|| 
!</pre>
</div>	<p>Provide appropriate text in the output.  Also provide
a termination message with your name.</p>
<p><a href="#answer38">Answer 38</a></p>








<h1><a name="Listings">Listings</a></h1>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Listing for Question 13. </li>
	<li><a href="#Listing_2">Listing 2</a>. Listing for Question 22. </li>
	<li><a href="#Listing_3">Listing 3</a>. Listing for Answer 38. </li>
	<li><a href="#Listing_4">Listing 4</a>. Listing for Answer 37. </li>
	<li><a href="#Listing_5">Listing 5</a>. Listing for Answer 36.</li>
</ul>

<hr/>

<p>Additional review questions with answers are provided in the appendix to this 
eBook. It is highly recommended that you study that material also.</p>
<hr/>
<h1><a name="Answers">Answers</a></h1>


<h2><a name="answer38">Answer 38</a></h2>
<!--``1List03-->
<div class="a">				<p><a name="Listing_3">Listing 3</a>. Listing for Answer 38.
</p>
<pre>
/*File SampProg09.java from chapter 22
Copyright, R.G.Baldwin
Without reviewing the following solution, write a Java
application that illustrates the use of the following
logical or conditional operators:
  
&amp;&amp;  ||  !

Provide appropriate text in the output.  Also provide
a termination message with your name.
*********************************************************/
class SampProg09 { //define the controlling class
  public static void main(String[] args){ //define main
    System.out.println(&quot;true and true is &quot; 
      + (true &amp;&amp; true) );
    System.out.println(&quot;true and false is &quot; 
      + (true &amp;&amp; false) );

    System.out.println(&quot;true or true is &quot; 
      + (true || true) );
    System.out.println(&quot;true or false is &quot; 
      + (true || false) );
    System.out.println(&quot;false or false is &quot; 
      + (false || false) );
    
    System.out.println(&quot;not true is &quot; + (! true) );
    System.out.println(&quot;not false is &quot; + (! false) );    

    System.out.println(&quot;Terminating, Dick Baldwin&quot;);
  }//end main
}//End SampProg09 class.  Note no semicolon required
</pre>

</div><!--``2-->
<p><a href="#question38">Back to Question 38</a> </p>

<h2><a name="answer37">Answer 37</a></h2>
<!--``1List04-->
<div class="a">				<p><a name="Listing_4">Listing 4</a>. Listing for Answer 37.
</p>
<pre>
/*File SampProg08.java from chapter 22
Copyright, R.G.Baldwin
Without reviewing the following solution, write a Java
application that illustrates the use of the following
relational operators:
  
&lt; &gt; &lt;= &gt;= == !=

Provide appropriate text in the output.  Also provide
a termination message with your name.
*********************************************************/
class SampProg08 { //define the controlling class
  public static void main(String[] args){ //define main
    System.out.println(&quot;The relational 6&lt;5 is &quot; 
                                             + (6&lt;5 ) );
    System.out.println(&quot;The relational 6&gt;5 is &quot; 
                                             + (6&gt;5 ) );
    System.out.println(&quot;The relational 5&gt;=5 is &quot; 
                                            + (5&gt;=5 ) );
    System.out.println(&quot;The relational 5&lt;=5 is &quot; 
                                            + (5&lt;=5 ) );
    System.out.println(&quot;The relational 6==5 is &quot; 
                                               + (6==5 ) );
    System.out.println(&quot;The relational 6!=5 is &quot; 
                                               + (6!=5 ) );
    System.out.println(&quot;Terminating, Dick Baldwin&quot;);
  }//end main
}//End SampProg08 class.  Note no semicolon required
</pre>
</div><!--``2-->
<p><a href="#question37">Back to Question 37</a> </p>

<h2><a name="answer36">Answer 36</a></h2>
<!--``1List05-->
<div class="a">				<p><a name="Listing_5">Listing 5</a>. Listing for Answer 36.
</p>
<pre>
/*File SampProg07.java from chapter 22
Copyright, R.G.Baldwin
Without reviewing the following solution, write a Java
application that clearly illustrates the difference between
the prefix and the postfix versions of the increment 
operator.

Provide a termination message that displays your name.
*********************************************************/
class SampProg07{
  static public void main(String[] args){
    int x = 3;
    int y = 3;
    int z = 10;
    System.out.println(&quot;Prefix version gives  &quot; 
                                            + (z + ++x));
    System.out.println(&quot;Postfix version gives &quot; 
                                            + (z + y++));
    System.out.println(&quot;Terminating, Dick Baldwin&quot;);
  }//end main
}//end class SampProg07
</pre>

</div><!--``2-->
<p><a href="#question36">Back to Question 36</a> </p>

<h2><a name="answer35">Answer 35</a></h2>
<p>Java supports the following list of <i>shortcut</i> assignment operators. 
These operators allow you to perform an assignment and another operation with a 
single operator.</p>



<div class="a">				<pre>
+= 
-= 
*= 
/= 
%= 
&amp;= 
|= 
^= 
&lt;&lt;= 
&gt;&gt;= 
&gt;&gt;&gt;=</pre>
</div><p>For example, the two statements that follow perform the same operation.</p>
<ul>
	<li><strong>x += y;</strong> </li>
	<li><strong>x = x + y;</strong></li>
</ul>
<p>The behavior of each of the <i>shortcut</i> assignment operators follows this 
same pattern. </p>
<p><a href="#question35">Back to Question 35</a> </p>

<h2><a name="answer34">Answer 34</a></h2>
<p>True. </p>
<p><a href="#question34">Back to Question 34</a> </p>

<h2><a name="answer33">Answer 33</a></h2>
<p>The assignment operator is a <i>binary </i>operator. </p>
<p><a href="#question33">Back to Question 33</a> </p>

<h2><a name="answer32">Answer 32</a></h2>
<p>True. </p>
<p><a href="#question32">Back to Question 32</a> </p>

<h2><a name="answer31">Answer 31</a></h2>
<p>The answer for the bitwise <i>exclusive or</i> is: </p>
<ul>
	<li>11 1 xor 1 produces 0</li>
	<li>10 1 xor 0 produces 1</li>
	<li>01 0 xor 1 produces 1</li>
	<li>00 0 xor 0 produces 0 </li>
</ul>
<p><a href="#question31">Back to Question 31</a> </p>

<h2><a name="answer30">Answer 30</a></h2>
<p>The answer for the bitwise <i>inclusive or</i> is: </p>
<ul>
	<li>11 1 or 1 produces 1</li>
	<li>10 1 or 0 produces 1</li>
	<li>01 0 or 1 produces 1</li>
	<li>00 0 or 0 produces 0 </li>
</ul>
<p><a href="#question30">Back to Question 30</a> </p>

<h2><a name="answer29">Answer 29</a></h2>
<p>The answer for the bitwise <strong><em>and</em></strong> is:</p>
<ul>
	<li>11 1 and 1 produces 1</li>
	<li>10 1 and 0 produces 0</li>
	<li>01 0 and 1 produces 0</li>
	<li>00 0 and 0 produces 0 </li>
</ul>
<p><a href="#question29">Back to Question 29</a> </p>

<h2><a name="answer28">Answer 28</a></h2>
<p>True: Bits shifted off the right end are lost. </p>
<p><a href="#question28">Back to Question 28</a> </p>

<h2><a name="answer27">Answer 27</a></h2>
<p>False: In Java, the <i>signed</i> right shift operation populates the vacated 
bits with the sign bit, while the left shift and the <i>unsigned</i> right shift 
populate the vacated bits with zeros. </p>
<p><a href="#question27">Back to Question 27</a> </p>

<h2><a name="answer26">Answer 26</a></h2>
<p>The following table shows the seven bitwise operators supported by Java.</p>



<div class="a">				<p><strong>Bitwise operators</strong></p>
<pre>
Operator    Typical Use         Operation

 &gt;&gt;     OpLeft &gt;&gt; Dist      Shift bits of OpLeft right by
                            Dist bits (signed)
 &lt;&lt;     OpLeft &lt;&lt; Dist      Shift bits of OpLeft left by 
                            Dist bits
 &gt;&gt;&gt;    OpLeft &gt;&gt;&gt; Dist     Shift bits of OpLeft right 
                            by Dist bits (unsigned)
 &amp;      OpLeft &amp; OpRight    Bitwise and of the two 
                            operands
 |      OpLeft | OpRight    Bitwise <i>inclusive </i>or of the 
                            two operands       
 ^      OpLeft ^ OpRight    Bitwise <i>exclusive </i>or (xor) of 
                            the two operands
 ~      ~ OpRight           Bitwise complement of the 
                            right operand (unary)</pre>
</div><p><a href="#question26">Back to Question 26</a> </p>




<h2><a name="answer25">Answer 25</a></h2>
<p>The bitwise <strong><em>and</em></strong> operator and the bitwise <strong>
<em>inclusive or</em></strong> operator are shown below.</p>



<div class="a">				<p><strong>Two bitwise operators</strong>
</p>
<pre>
&amp; bitwise and
| bitwise inclusive or</pre>
</div><p><a href="#question25">Back to Question 25</a> </p>

<h2><a name="answer24">Answer 24</a></h2>
<p>An important characteristic of the behavior of the <strong><em>logical and</em></strong> 
operator and the <strong><em>logical or</em></strong> operator in Java is that 
the expressions containing them are evaluated from <i>left to right.</i> The 
evaluation of the expression is. terminated as soon as the result of evaluating 
the expression can be determined. For example, in the expression given in
<a href="#question24">Question 24</a>, if the variable <strong>a</strong> is 
less than the variable <strong>b</strong>, there is no need to evaluate the 
right operand of the <strong>||</strong> operator to determine the value of the 
entire expression. Therefore, evaluation will terminate as soon as it is 
determined that <strong>a</strong> is less than <strong>b</strong>. </p>
<p><a href="#question24">Back to Question 24</a> </p>

<h2><a name="answer23">Answer 23</a></h2>
<p>The following three <i>logical</i> or <i>conditional</i> operators are 
supported by Java.</p>



<div class="a">				<p><strong>The logical or conditional operators</strong></p>
<pre>
Operator  Typical Use       Returns true if 
&amp;&amp;        Left &amp;&amp; Right     Left and Right are both true
||        Left || Right     Either Left or Right is true 
!         ! Right           Right is false</pre>
</div><p><a href="#question23">Back to Question 23</a> </p>

<h2><a name="answer22">Answer 22</a></h2>
<p>This program produces the following output: </p>



<div class="a">				<pre>
The relational 6&lt;5 is false
The relational 6&gt;5 is true</pre>
</div><p><a href="#question22">Back to Question 22</a> </p>

<h2><a name="answer21">Answer 21</a></h2>
<p>Java supports the following set of <i>relational </i>operators:</p>



<div class="a">				<p><strong>Relational operators</strong>
				</p>
				<pre>
Operator    Returns true if   
   &gt;        Left operand is greater than right operand 
   &gt;=       Left operand is greater than or equal 
            to right operand
   &lt;        Left operand is less than right operand  
   &lt;=       Left operand is less than or equal 
            to right operand
   ==       Left operand is equal to right operand   
   !=       Left operand is not equal to right operand</pre>
</div><p><a href="#question21">Back to Question 21</a> </p>

<h2><a name="answer20">Answer 20</a></h2>
<p><i>Relational</i> operators return the <strong>boolean</strong> type in Java. </p>
<p><a href="#question20">Back to Question 20</a> </p>

<h2><a name="answer19">Answer 19</a></h2>
<p>Java supports the following four <i>unary</i> arithmetic operators.</p>



<div class="a">				<p><strong>Unary arithmetic operators</strong></p>
<pre>
Operator    Description                              
   +        Indicates a positive value               
   -        Negates, or changes algebraic sign       
   ++       Adds one to the operand, 
            both prefix and postfix
   --       Subtracts one from operand, 
            both prefix and postfix</pre>
</div>
	
	
	

<p><a href="#question19">Back to Question 19</a> </p>

<h2><a name="answer18">Answer 18</a></h2>
<p>The operator coerces the value of the right operand to a string 
representation for use in the expression only. If the right operand is a 
variable, the value stored in the variable is not modified in any way. </p>
<p><a href="#question18">Back to Question 18</a> </p>

<h2><a name="answer17">Answer 17</a></h2>
<p>The plus operator <em>(+) </em>is also used to concatenate strings as in the 
following code fragment:</p>



<div class="a">				<p><strong>String concatenation</strong>
				</p>
				<pre>
&quot;MyVariable has a value of  &quot; 
     + MyVariable + &quot; in this program.&quot;</pre>

</div><p><a href="#question17">Back to Question 17</a> </p>

<h2><a name="answer16">Answer 16</a></h2>
<p>Java support various arithmetic operators on floating point and integer 
numbers. The following table lists five of the <i>binary</i> arithmetic 
operators supported by Java.</p>



<div class="a">				<p><strong>Binary arithmetic operators</strong>
				</p>
				<pre>
Operator    Description                              
   
   +        Adds its operands                        
   -        Subtracts the right operand from the left
            operand
   *        Multiplies the operands                  
   /        Divides the left operand by the right 
            operand 
   %        Remainder of dividing the left operand by
            the right operand</pre>

</div><p><a href="#question16">Back to Question 16</a> </p>



<h2><a name="answer15">Answer 15</a></h2>
<p>As a result of performing the specified action, an operator can be said to 
return a value <em>(or evaluate to a value)</em> of a given type. The type 
depends on the operator and the type of the operands. To <em>evaluate to a value</em> 
means that after the action is performed, the operator and its operands are 
effectively replaced in the expression by the value that is returned. </p>
<p><a href="#question15">Back to Question 15</a> </p>


<h2><a name="answer14">Answer 14</a></h2>
<p>False: <i>Binary</i> operators use <i>infix</i> notation, which means that 
the operator appears between its operands. </p>
<p><a href="#question14">Back to Question 14</a> </p>


<h2><a name="answer13">Answer 13</a></h2>
<p>The output from this Java application follows (without the bullets):</p>
<ul>
	<li>x = 5
</li>
	<li>X = 5</li>
	<li>x + X++ = 10</li>
	<li>X = 6</li>
	<li>y = 5</li>
	<li>Y = 5</li>
	<li>y + ++Y = 11</li>
	<li>Y = 6</li>
</ul>
<p><a href="#question13">Back to Question 13</a> </p>


<h2><a name="answer12">Answer 12</a></h2>
<p>The increment operator may be used with both <i>prefix</i> and <i>postfix</i> 
notation. Basically, the increment operator causes the value of the variable to 
which it is applied to be increased by one. </p>
<p>With <i>prefix </i>notation, the operand appears to the right of the operator
<em>(++X)</em>, while with <i>postfix</i> notation, the operand appears to the 
left of the operator <em>(X++)</em>. </p>
<p>The difference in behavior has to do with the point in the sequence of 
operations that the increment actually occurs. </p>
<p>With the <i>prefix</i> version, the variable is incremented before it is used 
to evaluate the larger overall expression in which it appears. With the <i>
postfix</i> version, the 
variable is used to evaluate the larger overall expression and then the variable 
is incremented. </p>
<p>This is illustrated by the following code fragment.</p>
<div class="a">
<pre>
    //Prefix syntax: ++myNum
    //Postfix syntax: myNum++
    int a = 5;
    int b = 5;
    int c = 5;
    int sum = a + ++b;
    
    System.out.println("Prefix");
    System.out.println("a equals " + a + ", b equals " + b);
    System.out.println("sum equals " + sum);
    
    System.out.println("Postfix");
    sum = a + c++;
    System.out.println("a equals " + a + ", c equals " + c);
    System.out.println("sum equals " + sum);
</pre>
</div>
<p>This code fragment will produce the output shown below.</p>
<div class="a">
<pre>
Prefix
a equals 5, b equals 6
sum equals 11
Postfix
a equals 5, c equals 6
sum equals 10
</pre>
</div>
<p><a href="#question12">Back to Question 12</a> </p>

<h2><a name="answer11">Answer 11</a></h2>
<p>The symbol for the increment operator is two plus signs with no space between 
them <em>(++).</em> </p>
<p><a href="#question11">Back to Question 11</a> </p>


<h2><a name="answer10">Answer 10</a></h2>
<p>False: The increment operator is a <em>unary</em> operator. </p>
<p><a href="#question10">Back to Question 10</a> </p>



<h2><a name="answer09">Answer 9</a> </h2>
<p>The cast operator is used to purposely and temporarily convert from one type to another. </p>
<p><a href="#question09">Back to Question 9</a> </p>
<h2><a name="answer08">Answer 8</a> </h2>
<p>The plus sign <em>(+)</em> is automatically overloaded in Java. The plus sign 
can be used to perform arithmetic addition. It can also be used to concatenate 
strings. However, the plus sign does more than concatenate strings. It also 
performs a conversion to <strong>String</strong> type. When the plus sign is used to concatenate 
strings and one operand is a string, the other operand is automatically 
converted to a character string before being concatenated with the existing 
string.</p>
<p><a href="#question08">Back to Question 8</a> </p>
<h2><a name="answer07">Answer 7</a> </h2>
<p>The operators listed in order are: </p>
<ul>
	<li>= </li>
	<li>!= </li>
	<li>+ </li>
	<li>(char)</li>
</ul>
<p>where the cast operator is being used to cast to the type <strong>char</strong>.</p>
<p><a href="#question07">Back to Question 7</a> </p>

<h2><a name="answer06">Answer 6</a></h2>
<p>Java does not support operator overloading by programmers.</p>
<p><a href="#question06">Back to Question 6</a> </p>


<h2><a name="answer05">Answer 5</a></h2>
<p>For those languages that support it <em>(such as C++)</em> operator 
overloading means that the programmer can redefine the behavior of an operator 
with respect to objects of a new type defined by that program. </p>
<p><a href="#question05">Back to Question 5</a> </p>
<h2><a name="answer04">Answer 4</a> </h2>
<p>Both. As a <em>binary</em> operator, the minus sign causes its right operand 
to be subtracted from its left operand. As a <em>unary</em> operator, the minus 
sign causes the algebraic sign of the right operand to be changed. </p>
<p><a href="#question04">Back to Question 4</a> </p>
<h2><a name="answer03">Answer 3</a> </h2>
<p>An operator that operates on two operands is called a <em>binary</em> 
operator. </p>
<p><a href="#question03">Back to Question 3</a> </p>
<h2><a name="answer02">Answer 2</a></h2>
<p>An operator that operates on only one operand is called a <em>unary</em> 
operator. </p>
<p><a href="#question02">Back to Question 2</a> </p>


<h2><a name="answer01">Answer 1</a> </h2>
<p>An operator performs an action on one or two operands. </p>
<p><a href="#question01">Back to Question 1</a> </p>

<h1><a name="Miscellaneous">Miscellaneous</a></h1>
<p>This section contains a variety of miscellaneous information. </p>

<div class="a"><p>Housekeeping material </p>
			<ul>
				<li>Author: Prof. Richard G. Baldwin</li>
				<li>Chapter name: Jb0210r Review: Operators</li>
				<li>File: Jb0210r.htm </li>
				<li>Originally published: 1997</li>
				<li>Published at cnx.org: 11/23/12</li>
				<li>Revised: 06/27/21</li>
			</ul>
</div>

<p>-end- </p>


</body>
</html>
<!--
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
-->
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">

<head>
<meta content="en-us" http-equiv="Content-Language" />
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Jb0280r Review: String and StringBuffer</title>
<style type="text/css">
a:link {color:#0000ff;}
a:visited {color:#cc00cc;}
a:active {color:#ff0000;}
p{color:black;}
h1{color:green}
h2{color: purple}
h3{color: gray}
b{color: #000000}
strong{color: #000000}
blockquote{color: purple}
ul{color: maroon}
ol{color: maroon}
table{border: 1px solid black}
th{border: 1px solid black}
a:hover {
	color: #cc0000;
	font-weight: bold;
	text-decoration: none;
}
.auto-style1 {
	text-align: center;
}
div.a {
  border: 2px solid black;
}
</style>
</head>

<body style="font-family: Arial,Helvetica,sans-serif;font-size: 12pt; background-color: #FEFFF0;"
>

<h1 class="auto-style1">Jb0280r Review: String and StringBuffer</h1>


<h1 class="style1">Table of Contents</h1>
<ul>
	<li><a href="#Preface">Preface</a></li>
	<li><a href="#Questions">Questions</a>
	<ul>
		<li><a href="#question01">1</a>, <a href="#question02">2</a>,
		<a href="#question03">3</a>, <a href="#question04">4</a>,
		<a href="#question05">5</a>, <a href="#question06">6</a>,
		<a href="#question07">7</a>, <a href="#question08">8</a>,
		<a href="#question09">9</a>, <a href="#question10">10</a>, 
		<a href="#question11">11</a>, <a href="#question12">12</a>, 
		<a href="#question13">13</a>, 
		<a href="#question14">14</a></li>
	</ul>
	</li>
	<li><a href="#Listings">Listings</a></li>
	<li><a href="#Answers">Answers</a></li>
	<li><a href="#Miscellaneous">Miscellaneous</a></li>
</ul>
<h1><a name="Preface">Preface</a></h1>
<p>This chapter contains review questions and answers keyed to the chapter titled 
<em>Jb0280: Java OOP: String and StringBuffer.</em></p>
<p>The questions and the answers are connected by hyperlinks to make it easy for 
you to navigate from the question to the answer and back again. </p>
<h1><a name="Questions">Questions</a></h1>

<h2><a name="question01">Question 1</a><b>. </b> </h2>
<p>Java provides two different string classes from which string objects can be 
instantiated. What are they? </p>
<p><a href="#answer01">Answer 1</a> </p>

<h2><a name="question02">Question 2</a></h2>
<p>True or false? The <strong>StringBuffer</strong> class is used for strings 
that are not allowed to change. The <strong>String</strong> class is used for 
strings that are modified by the program. If false, explain why. </p>
<p><a href="#answer02">Answer 2</a> </p>

<h2><a name="question03">Question 3</a> </h2>
<p>True or false? While the contents of a <strong>String</strong> object cannot 
be modified, a reference to a <strong>String</strong> object can be caused to 
point to a different <strong>String</strong> object. If false, explain why. </p>
<p><a href="#answer03">Answer 3</a> </p>

<h2><a name="question04">Question 4</a></h2>
<p>True or false? The use of the <strong>new</strong> operator is required for 
instantiation of objects of type <strong>String</strong>. If false, explain your 
answer. </p>
<p><a href="#answer04">Answer 4</a> </p>

<h2><a name="question05">Question 5</a></h2>
<p>True or false? The use of the <strong>new</strong> operator is required for 
instantiation of objects of type <strong>StringBuffer</strong>. If false, 
explain your answer</p>
<p><a href="#answer05">Answer 5</a></p>

<h2><a name="question06">Question 6</a></h2>
<p>Provide a code fragment that illustrates how to instantiate an empty <strong>
StringBuffer</strong> object of a default length and then use a version of the
<strong>append</strong> method to put some data into the object. </p>
<p><a href="#answer06">Answer 6</a> </p>

<h2><a name="question07">Question 7</a></h2>
<p>Without specifying any explicit numeric values, provide a code fragment that 
will instantiate an empty <strong>StringBuffer</strong> object of the correct 
initial length to contain the string <em>&quot;StringBuffer named str6&quot;</em> and then store 
that string in the object. </p>
<p><a href="#answer07">Answer 7</a></p>

<h2><a name="question08">Question 8</a> </h2>
<p>Provide a code fragment consisting of a single statement showing how to use 
the <strong>Integer</strong> wrapper class to convert a string containing digits 
to an integer and store it in a variable of type <strong>int</strong>. </p>
<p><a href="#answer08">Answer 8</a> </p>

<h2><a name="question09">Question 9</a></h2>
<p>Explain the difference between the <strong>capacity</strong> method and the
<strong>length</strong> method of the <strong>StringBuffer</strong> class. </p>
<p><a href="#answer09">Answer 9</a> </p>

<h2><a name="question10">Question 10</a></h2>
<p>True or false? The following is a valid code fragment. If false, explain why. </p>



<div class="a">
				<pre>
StringBuffer str6 = 
  new StringBuffer(&quot;StringBuffer named str6&quot;.length());</pre>
</div>
<p><a href="#answer10">Answer 10</a></p>
	
<h2><a name="question11">Question 11</a></h2>
<p>Which of the following code fragments is the most efficient, first or second?</p>



<div class="a">
				<pre>
String str1 = &quot;THIS STRING IS NAMED str1&quot;;

String str1 = new String(&quot;THIS STRING IS NAMED str1&quot;);</pre>
</div>
<p><a href="#answer11">Answer 11</a></p>
	
<h2><a name="question12">Question 12</a></h2>
<p>Write a Java
application that illustrates the fact that while a <strong>String</strong> 
object cannot be modified, the reference variable can be 
modified to point to a new <strong>String</strong> object, which can have the
appearance of modifying the original <strong>String</strong> object.
</p>
<p><a href="#answer12">Answer 12</a></p>
	
<h2><a name="question13">Question 13</a></h2>
<p>Write a Java application that illustrates different ways to
create <strong>String</strong> objects and <strong>StringBuffer</strong> objects.
</p>
<p><a href="#answer13">Answer 13</a></p>
	
<h2><a name="question14">Question 14</a></h2>
<p>Write a Java application that illustrates conversion from string to numeric.</p>
<p><a href="#answer14">Answer 14</a></p>








<h1><a name="Listings">Listings</a></h1>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. File SampProg26.java.</li>
	<li><a href="#Listing_2">Listing 2</a>. File SampProg25.java.</li>
	<li><a href="#Listing_3">Listing 3</a>. File SampProg24.java.</li>
</ul>



<hr/>
<p>Additional review questions with answers are provided in the appendix to this 
eBook. It is highly recommended that you study that material also.</p>
<hr/>
<h1><a name="Answers">Answers</a></h1>




<h2><a name="answer14">Answer 14</a></h2>
<!--``1List01-->
<div class="a"><a name="Listing_1">Listing 1</a>. File SampProg26.java.
<pre>
/*File SampProg26.java from chapter 50
Copyright, R.G.Baldwin
Without viewing the solution that follows, write a Java
application that illustrates conversion from string to 
numeric, similar to the atoi() function in C.

The output from the program should be:
The value of the int variable num is 3625
===========================================================
*/

class SampProg26{
  public static void main(String[] args){
    int num = new Integer(&quot;3625&quot;).intValue();
    System.out.println(
      &quot;The value of the int variable num is &quot; + num);
  }//end main()
}//end class SampProg26
</pre>

</div>
<!--``2-->
<p><a href="#question14">Back to Question 14</a> </p>


<h2><a name="answer13">Answer 13</a></h2>

<div class="a">
<a name="Listing_2">Listing 2</a>. <strong>File SampProg25.java.</strong>

<pre>
/*File SampProg25.java from chapter 50
Copyright, R.G.Baldwin
Write a Java application that illustrates different ways to
create String objects and StringBuffer objects.

The output from this program should be (line breaks 
manually inserted to make it fit the format):

Create a String using new and display it
String named str2

Create a String without using new and display it
String named str1

Create, initialize, and display a StringBuffer using new
StringBuffer named str3

Try to create/initialize StringBuffer without using new 

Create an empty StringBuffer of default length
Now put some data in it and display it
StringBuffer named str5

Create an empty StringBuffer and specify length when 
created
Now put some data in it and display it
StringBuffer named str6

Try to create and append to StringBuffer without using new
**********************************************************/

class SampProg25{
  void d(String displayString){//method to display strings
    System.out.println(displayString);
  }//end method d()

  public static void main(String[] args){
    //instantiate an object to display methods
    SampProg25 o = new SampProg25();
    
    o.d(&quot;Create a String using new and display it&quot;);
    String str1 = new String(&quot;String named str2&quot;);
    o.d(str1 + &quot;\n&quot;);
    
    o.d(
    &quot;Create a String without using new and display it&quot;);
    String str2 = &quot;String named str1&quot;;
    o.d(str2 + &quot;\n&quot;);
  
    o.d(&quot;Create, initialize, and display a StringBuffer &quot; 
      + &quot;using new&quot;);
    StringBuffer str3 = new StringBuffer(
      &quot;StringBuffer named str3&quot;);
    o.d(str3.toString()+&quot;\n&quot;);

    o.d(&quot;Try to create/initialize StringBuffer without &quot; 
      + &quot;using new \n&quot;);    
    //StringBuffer str4 = //not allowed by compiler
    //  &quot;StringBuffer named str4&quot;;
    
    o.d(
    &quot;Create an empty StringBuffer of default length&quot;);  
    //accept default initial length
    StringBuffer str5 = new StringBuffer();
    o.d(&quot;Now put some data in it and display it&quot;);
    //modify length as needed
    str5.append(&quot;StringBuffer named str5&quot;);
    o.d(str5.toString() + &quot;\n&quot;);
    
    o.d(&quot;Create an empty StringBuffer and specify length &quot;
      + &quot;when created&quot;);
    StringBuffer str6 = new StringBuffer(
      &quot;StringBuffer named str6&quot;.length());
    o.d(&quot;Now put some data in it and display it&quot;);    
    str6.append(&quot;StringBuffer named str6&quot;);
    o.d(str6.toString() + &quot;\n&quot;);
    
    o.d(
    &quot;Try to create and append to StringBuffer without &quot;
      + &quot;using new&quot;);
    //StringBuffer str7;
    //str7.append(&quot;StringBuffer named str7&quot;);
  }//end main()  
}//end class SampProg25
</pre>

</div>


<p><a href="#question13">Back to Question 13</a> </p>


<h2><a name="answer12">Answer 12</a></h2>
<!--``1List03-->
<div class="a"><a name="Listing_3">Listing 3</a>. File SampProg24.java.
<pre>
/*File SampProg24.java from chapter 50
Copyright, R.G.Baldwin
Without viewing the solution that follows, Write a Java
application that illustrates the fact that while a String 
object cannot be modified, the reference variable can be 
modified to point to a new String object which can have the
appearance of modifying the original String object.

The output from this program should be

Display original string values
THIS STRING IS NAMED str1
This string is named str2
Replace str1 with another string
Display new string named str1
THIS STRING IS NAMED str1 This string is named str2
Terminating program
**********************************************************/

class SampProg24{
  String str1 = &quot;THIS STRING IS NAMED str1&quot;;
  String str2 = &quot;This string is named str2&quot;;
  
  public static void main(String[] args){
    SampProg24 thisObj = new SampProg24();
    System.out.println(&quot;Display original string values&quot;);
    System.out.println(thisObj.str1);
    System.out.println(thisObj.str2);
    System.out.println(
      &quot;Replace str1 with another string&quot;);
    thisObj.str1 = thisObj.str1 + &quot; &quot; + thisObj.str2;
    System.out.println(&quot;Display new string named str1&quot;);
    System.out.println(thisObj.str1);
    System.out.println(&quot;Terminating program&quot;);
  }//end main()
}//end class SampProg24
</pre>

</div>
<!--``2-->
<p><a href="#question12">Back to Question 12</a> </p>

<h2><a name="answer11">Answer 11</a></h2>
<p>The first code fragment is the most efficient. </p>
<p><a href="#question11">Back to Question 11</a> </p>


<h2><a name="answer10">Answer 10</a></h2>
<p>True. </p>
<p><a href="#question10">Back to Question 10</a> </p>



<h2><a name="answer09">Answer 9</a> </h2>
<p>The <strong>capacity</strong> method returns the amount of space currently 
allocated for the <strong>StringBuffer</strong> object. The <strong>length</strong> 
method returns the amount of space used. </p>
<p><a href="#question09">Back to Question 9</a> </p>
<h2><a name="answer08">Answer 8</a> </h2>



<div class="a">
				<pre>
    int num = new Integer(&quot;3625&quot;).intValue();</pre>
</div>
<p><a href="#question08">Back to Question 8</a> </p>
<h2><a name="answer07">Answer 7</a> </h2>



<div class="a">
				<pre>
StringBuffer str6 = 
  new StringBuffer(&quot;StringBuffer named str6&quot;.length());
str6.append(&quot;StringBuffer named str6&quot;);</pre>
</div>
<p><a href="#question07">Back to Question 7</a> </p>

<h2><a name="answer06">Answer 6</a></h2>



<div class="a">
				<pre>
StringBuffer str5 = 
  new StringBuffer();//accept default initial length
str5.append(
      &quot;StringBuffer named str5&quot;);//modify length as needed</pre>
</div>
<p><a href="#question06">Back to Question 6</a> </p>


<h2><a name="answer05">Answer 5</a></h2>
<p>True. </p>
<p><a href="#question05">Back to Question 5</a> </p>
<h2><a name="answer04">Answer 4</a> </h2>
<p>False. A String object can be instantiated using either of the following 
statements: </p>



<div class="a">
				<pre>
    String str1 = new String(&quot;String named str2&quot;);
   
    String str2 = &quot;String named str1&quot;;</pre>
</div>
<p><a href="#question04">Back to Question 4</a> </p>
<h2><a name="answer03">Answer 3</a> </h2>
<p>True.</p>
<p><a href="#question03">Back to Question 3</a> </p>
<h2><a name="answer02">Answer 2</a></h2>
<p>False. This statement is backwards. The <strong>String</strong> class is used 
for strings that are not allowed to change. The <strong>StringBuffer</strong> 
class is used for strings that are modified by the program. </p>
<p><a href="#question02">Back to Question 2</a> </p>


<h2><a name="answer01">Answer 1</a> </h2>
<p>The two classes are: </p>
<ul>
	<li>String </li>
	<li>StringBuffer </li>
</ul>
<p><a href="#question01">Back to Question 1</a> </p>

<h1><a name="Miscellaneous">Miscellaneous</a></h1>
<p>This section contains a variety of miscellaneous information. </p>

<div class="a"><p>Housekeeping material </p>
			<ul>
				<li>Author: Prof. Richard G. Baldwin</li>
				<li>Chapter name: Jb0280r Review: String and StringBuffer</li>
				<li>File: Jb0280r.htm </li>
				<li>Originally published: 1997</li>
				<li>Published at cnx.org: 11/29/12</li>
				<li>Revised: 03/02/20</li>
			</ul>
</div>



	<p>-end- </p>


</body>
</html>